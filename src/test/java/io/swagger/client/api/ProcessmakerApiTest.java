/**
 * ProcessMaker API
 * This ProcessMaker Core API provide access to the new generation engine with BPMN 2.0 support. The current Alpha 1.0 version supports  the part of BPM system functionality like process import, process execution, task assignment
 *
 * OpenAPI spec version: 1.0.0
 * Contact: alpha-program@processmaker.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.EventItem;
import io.swagger.client.model.ErrorArray;
import io.swagger.client.model.EventCreateItem;
import io.swagger.client.model.FlowCreateItem;
import io.swagger.client.model.FlowItem;
import io.swagger.client.model.GatewayItem;
import io.swagger.client.model.GatewayCreateItem;
import io.swagger.client.model.GroupCreateItem;
import io.swagger.client.model.GroupItem;
import io.swagger.client.model.ResultSuccess;
import io.swagger.client.model.TaskAddGroupsItem;
import io.swagger.client.model.InputOutputCreateItem;
import io.swagger.client.model.InputOutputItem;
import io.swagger.client.model.InstanceCreateItem;
import io.swagger.client.model.InstanceItem;
import io.swagger.client.model.ProcessItem;
import io.swagger.client.model.ProcessCreateItem;
import io.swagger.client.model.TaskItem;
import io.swagger.client.model.TaskCreateItem;
import io.swagger.client.model.UserItem;
import io.swagger.client.model.UserCreateItem;
import io.swagger.client.model.GroupAddUsersItem;
import io.swagger.client.model.DataModelItem1;
import io.swagger.client.model.TriggerEventCreateItem;
import io.swagger.client.model.EventCollection;
import io.swagger.client.model.FlowCollection;
import io.swagger.client.model.GatewayCollection;
import io.swagger.client.model.GroupCollection;
import io.swagger.client.model.InputOutputCollection;
import io.swagger.client.model.InstanceCollection;
import io.swagger.client.model.ProcessCollection;
import io.swagger.client.model.InlineResponse200;
import io.swagger.client.model.TaskInstanceCollection;
import io.swagger.client.model.TaskCollection;
import io.swagger.client.model.UserCollection;
import io.swagger.client.model.BpmnImportItem;
import io.swagger.client.model.ProcessCollection1;
import io.swagger.client.model.TaskRemoveGroupsItem;
import io.swagger.client.model.GroupRemoveUsersItem;
import io.swagger.client.model.TaskSyncGroupsItem;
import io.swagger.client.model.GroupSyncUsersItem;
import io.swagger.client.model.EventUpdateItem;
import io.swagger.client.model.FlowUpdateItem;
import io.swagger.client.model.GatewayUpdateItem;
import io.swagger.client.model.GroupUpdateItem;
import io.swagger.client.model.InputOutputUpdateItem;
import io.swagger.client.model.InstanceUpdateItem;
import io.swagger.client.model.ProcessUpdateItem;
import io.swagger.client.model.TaskUpdateItem;
import io.swagger.client.model.TaskInstanceUpdateItem;
import io.swagger.client.model.UserUpdateItem;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProcessmakerApi
 */
public class ProcessmakerApiTest {

    private final ProcessmakerApi api = new ProcessmakerApi();

    
    /**
     * 
     *
     * This method is intended for creating a new event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addEventTest() throws ApiException {
        String processId = null;
        EventCreateItem eventCreateItem = null;
        // EventItem response = api.addEvent(processId, eventCreateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for creating a new Sequence flow
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addFlowTest() throws ApiException {
        String processId = null;
        FlowCreateItem flowCreateItem = null;
        // FlowItem response = api.addFlow(processId, flowCreateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for creating a new gateway.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addGatewayTest() throws ApiException {
        String processId = null;
        GatewayCreateItem gatewayCreateItem = null;
        // GatewayItem response = api.addGateway(processId, gatewayCreateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for creating a new group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addGroupTest() throws ApiException {
        GroupCreateItem groupCreateItem = null;
        // GroupItem response = api.addGroup(groupCreateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for assignment group(s) to the choosen task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addGroupsToTaskTest() throws ApiException {
        String processId = null;
        String taskId = null;
        TaskAddGroupsItem taskAddGroupsItem = null;
        // ResultSuccess response = api.addGroupsToTask(processId, taskId, taskAddGroupsItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for creating a new InputOutput
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addInputOutputTest() throws ApiException {
        String processId = null;
        String taskId = null;
        InputOutputCreateItem inputOutputCreateItem = null;
        // InputOutputItem response = api.addInputOutput(processId, taskId, inputOutputCreateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for creating a new instance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addInstanceTest() throws ApiException {
        String processId = null;
        InstanceCreateItem instanceCreateItem = null;
        // InstanceItem response = api.addInstance(processId, instanceCreateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is responsible for creating a new process
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addProcessTest() throws ApiException {
        ProcessCreateItem processCreateItem = null;
        // ProcessItem response = api.addProcess(processCreateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for creating a new task.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addTaskTest() throws ApiException {
        String processId = null;
        TaskCreateItem taskCreateItem = null;
        // TaskItem response = api.addTask(processId, taskCreateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for creating a new user in the system.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addUserTest() throws ApiException {
        UserCreateItem userCreateItem = null;
        // UserItem response = api.addUser(userCreateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for adding one, or more new users to a group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addUsersToGroupTest() throws ApiException {
        String id = null;
        GroupAddUsersItem groupAddUsersItem = null;
        // ResultSuccess response = api.addUsersToGroup(id, groupAddUsersItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for deleting a single item based on event_id and Process ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteEventTest() throws ApiException {
        String processId = null;
        String eventId = null;
        // ResultSuccess response = api.deleteEvent(processId, eventId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for deleting a single item based on the flow_id and Process ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFlowTest() throws ApiException {
        String processId = null;
        String flowId = null;
        // ResultSuccess response = api.deleteFlow(processId, flowId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for deleting a single item based on the gateway_id and Process ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteGatewayTest() throws ApiException {
        String processId = null;
        String gatewayId = null;
        // ResultSuccess response = api.deleteGateway(processId, gatewayId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for deleting a single item based on the itemâ€™s ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteGroupTest() throws ApiException {
        String id = null;
        // ResultSuccess response = api.deleteGroup(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for deleting a single item based on the InputOutput ID, Process ID and Task ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteInputOutputTest() throws ApiException {
        String processId = null;
        String taskId = null;
        String inputoutputUid = null;
        // ResultSuccess response = api.deleteInputOutput(processId, taskId, inputoutputUid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for deleting a single item based on the instance ID and Process ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteInstanceTest() throws ApiException {
        String processId = null;
        String instanceId = null;
        // ResultSuccess response = api.deleteInstance(processId, instanceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for deleting a single item based on the itemâ€™s ID. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProcessTest() throws ApiException {
        String id = null;
        // ResultSuccess response = api.deleteProcess(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for deleting a single item based on task_id and Process ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTaskTest() throws ApiException {
        String processId = null;
        String taskId = null;
        // ResultSuccess response = api.deleteTask(processId, taskId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method deletes User from the system.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        String id = null;
        // ResultSuccess response = api.deleteUser(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for creating an event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventTriggerTest() throws ApiException {
        String processId = null;
        String eventId = null;
        TriggerEventCreateItem triggerEventCreateItem = null;
        // DataModelItem1 response = api.eventTrigger(processId, eventId, triggerEventCreateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method returns the instance DataModel and lets work with it directly
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findDataModelTest() throws ApiException {
        String processId = null;
        String instanceId = null;
        Integer page = null;
        Integer perPage = null;
        // DataModelItem1 response = api.findDataModel(processId, instanceId, page, perPage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for retrieving an event based on itâ€™s ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findEventByIdTest() throws ApiException {
        String processId = null;
        String eventId = null;
        // EventItem response = api.findEventById(processId, eventId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method returns all events related to the runned process
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findEventsTest() throws ApiException {
        String processId = null;
        Integer page = null;
        Integer perPage = null;
        // EventCollection response = api.findEvents(processId, page, perPage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for retrieving a flow based on itâ€™s ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findFlowByIdTest() throws ApiException {
        String processId = null;
        String flowId = null;
        // FlowItem response = api.findFlowById(processId, flowId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for retrieving all existing flows.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findFlowsTest() throws ApiException {
        String processId = null;
        Integer page = null;
        Integer perPage = null;
        // FlowCollection response = api.findFlows(processId, page, perPage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for retrieving a gateway based on itâ€™s ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findGatewayByIdTest() throws ApiException {
        String processId = null;
        String gatewayId = null;
        // GatewayItem response = api.findGatewayById(processId, gatewayId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intending for retrieving all existing gateways.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findGatewaysTest() throws ApiException {
        String processId = null;
        Integer page = null;
        Integer perPage = null;
        // GatewayCollection response = api.findGateways(processId, page, perPage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is responsible for retrieving a group based on a single ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findGroupByIdTest() throws ApiException {
        String id = null;
        // GroupItem response = api.findGroupById(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is responsible for retrieving all existing groups.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findGroupsTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        // GroupCollection response = api.findGroups(page, perPage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for retrieving an InputOutput object based on ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findInputOutputByIdTest() throws ApiException {
        String processId = null;
        String taskId = null;
        String inputoutputUid = null;
        // InputOutputItem response = api.findInputOutputById(processId, taskId, inputoutputUid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for retrieving all existing InputOutput objects for the related task instance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findInputOutputsTest() throws ApiException {
        String processId = null;
        String taskId = null;
        Integer page = null;
        Integer perPage = null;
        // InputOutputCollection response = api.findInputOutputs(processId, taskId, page, perPage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is responsible for retrieving an instance based on itâ€™s ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findInstanceByIdTest() throws ApiException {
        String processId = null;
        String instanceId = null;
        // InstanceItem response = api.findInstanceById(processId, instanceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is responsible for retrieving all Instances related to the Process via Process ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findInstancesTest() throws ApiException {
        String processId = null;
        Integer page = null;
        Integer perPage = null;
        // InstanceCollection response = api.findInstances(processId, page, perPage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the process based on a single ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findProcessByIdTest() throws ApiException {
        String id = null;
        // ProcessItem response = api.findProcessById(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is responsible for retrieving all existing processes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findProcessesTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        // ProcessCollection response = api.findProcesses(page, perPage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is responsible for retrieving a task based on itâ€™s ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findTaskByIdTest() throws ApiException {
        String processId = null;
        String taskId = null;
        // TaskItem response = api.findTaskById(processId, taskId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is responsible for retrieving TaskInstance based on itâ€™s ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findTaskInstanceByIdTest() throws ApiException {
        String taskInstanceId = null;
        Integer page = null;
        Integer perPage = null;
        // InlineResponse200 response = api.findTaskInstanceById(taskInstanceId, page, perPage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is responsible for retrieving and finding tasks instances  related to the task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findTaskInstancesTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        // TaskInstanceCollection response = api.findTaskInstances(page, perPage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for returning a list of all Tasks related to the process
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findTasksTest() throws ApiException {
        String processId = null;
        Integer page = null;
        Integer perPage = null;
        // TaskCollection response = api.findTasks(processId, page, perPage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is responsible for returning a user based on their ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findUserByIdTest() throws ApiException {
        String id = null;
        // UserItem response = api.findUserById(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for returning all existing users in the system.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findUsersTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        // UserCollection response = api.findUsers(page, perPage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for importing BPMN files. This import covers next BPMN 2.0 elements for modeling processes: Sequence Flows, Start event, End event, Message Start event, Message Intermediate event, Timer Boundary Interrupting Event, Timer Boundary Non-Interrupting Event, Script task, User task, Service task Exclusive Gateways, Inclusive Gateways, Parallel Gateways. A new process is created when import passed successful.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importBpmnFileTest() throws ApiException {
        BpmnImportItem bpmnImportItem = null;
        // ProcessCollection1 response = api.importBpmnFile(bpmnImportItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method returns User information based on Token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void myselfUserTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        // UserItem response = api.myselfUser(page, perPage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for removing groups from a task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeGroupsFromTaskTest() throws ApiException {
        String processId = null;
        String taskId = null;
        TaskRemoveGroupsItem taskRemoveGroupsItem = null;
        // ResultSuccess response = api.removeGroupsFromTask(processId, taskId, taskRemoveGroupsItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for removing one or more users from a group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeUsersFromGroupTest() throws ApiException {
        String id = null;
        GroupRemoveUsersItem groupRemoveUsersItem = null;
        // ResultSuccess response = api.removeUsersFromGroup(id, groupRemoveUsersItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for synchronizing a one or more groups with a task.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void syncGroupsToTaskTest() throws ApiException {
        String processId = null;
        String taskId = null;
        TaskSyncGroupsItem taskSyncGroupsItem = null;
        // ResultSuccess response = api.syncGroupsToTask(processId, taskId, taskSyncGroupsItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for synchronizing one or more users with a group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void syncUsersToGroupTest() throws ApiException {
        String id = null;
        GroupSyncUsersItem groupSyncUsersItem = null;
        // ResultSuccess response = api.syncUsersToGroup(id, groupSyncUsersItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method lets update the existing Process Event with new  data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateEventTest() throws ApiException {
        String processId = null;
        String eventId = null;
        EventUpdateItem eventUpdateItem = null;
        // EventItem response = api.updateEvent(processId, eventId, eventUpdateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for updating an existing flow.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateFlowTest() throws ApiException {
        String processId = null;
        String flowId = null;
        FlowUpdateItem flowUpdateItem = null;
        // FlowItem response = api.updateFlow(processId, flowId, flowUpdateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for updating an existing gateway.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateGatewayTest() throws ApiException {
        String processId = null;
        String gatewayId = null;
        GatewayUpdateItem gatewayUpdateItem = null;
        // GatewayItem response = api.updateGateway(processId, gatewayId, gatewayUpdateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for updating an existing group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateGroupTest() throws ApiException {
        String id = null;
        GroupUpdateItem groupUpdateItem = null;
        // GroupItem response = api.updateGroup(id, groupUpdateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for updating an existing InputOutput.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateInputOutputTest() throws ApiException {
        String processId = null;
        String taskId = null;
        String inputoutputUid = null;
        InputOutputUpdateItem inputOutputUpdateItem = null;
        // InputOutputItem response = api.updateInputOutput(processId, taskId, inputoutputUid, inputOutputUpdateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for updating an existing Instance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateInstanceTest() throws ApiException {
        String processId = null;
        String instanceId = null;
        InstanceUpdateItem instanceUpdateItem = null;
        // InstanceItem response = api.updateInstance(processId, instanceId, instanceUpdateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for updating an existing process.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProcessTest() throws ApiException {
        String id = null;
        ProcessUpdateItem processUpdateItem = null;
        // ProcessItem response = api.updateProcess(id, processUpdateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for updating an existing task.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTaskTest() throws ApiException {
        String processId = null;
        String taskId = null;
        TaskUpdateItem taskUpdateItem = null;
        // TaskItem response = api.updateTask(processId, taskId, taskUpdateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for updating an existing TaskInstance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTaskInstanceTest() throws ApiException {
        String taskInstanceId = null;
        TaskInstanceUpdateItem taskInstanceUpdateItem = null;
        // InlineResponse200 response = api.updateTaskInstance(taskInstanceId, taskInstanceUpdateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This method is intended for updating parameters an existing user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserTest() throws ApiException {
        String id = null;
        UserUpdateItem userUpdateItem = null;
        // UserItem response = api.updateUser(id, userUpdateItem);

        // TODO: test validations
    }
    
}
