/**
 * ProcessMaker API
 * This ProcessMaker Core API provide access to the new generation engine with BPMN 2.0 support. The current Alpha 1.0 version supports  the part of BPM system functionality like process import, process execution, task assignment
 *
 * OpenAPI spec version: 1.0.0
 * Contact: alpha-program@processmaker.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.ErrorArray;
import io.swagger.client.model.ClientItem;
import io.swagger.client.model.ClientCreateItem;
import io.swagger.client.model.EventItem;
import io.swagger.client.model.EventCreateItem;
import io.swagger.client.model.FlowCreateItem;
import io.swagger.client.model.FlowItem;
import io.swagger.client.model.GatewayItem;
import io.swagger.client.model.GatewayCreateItem;
import io.swagger.client.model.GroupCreateItem;
import io.swagger.client.model.GroupItem;
import io.swagger.client.model.ResultSuccess;
import io.swagger.client.model.TaskAddGroupsItem;
import io.swagger.client.model.InputOutputCreateItem;
import io.swagger.client.model.InputOutputItem;
import io.swagger.client.model.InstanceCreateItem;
import io.swagger.client.model.InstanceItem;
import io.swagger.client.model.ProcessItem;
import io.swagger.client.model.ProcessCreateItem;
import io.swagger.client.model.TaskItem;
import io.swagger.client.model.TaskCreateItem;
import io.swagger.client.model.UserItem;
import io.swagger.client.model.UserCreateItem;
import io.swagger.client.model.GroupAddUsersItem;
import io.swagger.client.model.DataModelItem1;
import io.swagger.client.model.TriggerEventCreateItem;
import io.swagger.client.model.ClientCollection;
import io.swagger.client.model.EventCollection;
import io.swagger.client.model.FlowCollection;
import io.swagger.client.model.GatewayCollection;
import io.swagger.client.model.GroupCollection;
import io.swagger.client.model.InputOutputCollection;
import io.swagger.client.model.InstanceCollection;
import io.swagger.client.model.ProcessCollection;
import io.swagger.client.model.InlineResponse200;
import io.swagger.client.model.TaskInstanceCollection;
import io.swagger.client.model.TaskCollection;
import io.swagger.client.model.UserCollection;
import io.swagger.client.model.BpmnImportItem;
import io.swagger.client.model.ProcessCollection1;
import io.swagger.client.model.TaskRemoveGroupsItem;
import io.swagger.client.model.GroupRemoveUsersItem;
import io.swagger.client.model.TaskSyncGroupsItem;
import io.swagger.client.model.GroupSyncUsersItem;
import io.swagger.client.model.ClientUpdateItem;
import io.swagger.client.model.EventUpdateItem;
import io.swagger.client.model.FlowUpdateItem;
import io.swagger.client.model.GatewayUpdateItem;
import io.swagger.client.model.GroupUpdateItem;
import io.swagger.client.model.InputOutputUpdateItem;
import io.swagger.client.model.InstanceUpdateItem;
import io.swagger.client.model.ProcessUpdateItem;
import io.swagger.client.model.TaskUpdateItem;
import io.swagger.client.model.TaskInstanceUpdateItem;
import io.swagger.client.model.UserUpdateItem;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProcessmakerApi {
    private ApiClient apiClient;

    public ProcessmakerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProcessmakerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for addClient */
    private com.squareup.okhttp.Call addClientCall(String userId, ClientCreateItem clientCreateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = clientCreateItem;
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling addClient(Async)");
        }
        
        // verify the required parameter 'clientCreateItem' is set
        if (clientCreateItem == null) {
            throw new ApiException("Missing the required parameter 'clientCreateItem' when calling addClient(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/users/{user_id}/clients".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for creating a new Client for User
     * @param userId ID of User relative to client (required)
     * @param clientCreateItem JsonApi with the Client object to add (required)
     * @return ClientItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClientItem addClient(String userId, ClientCreateItem clientCreateItem) throws ApiException {
        ApiResponse<ClientItem> resp = addClientWithHttpInfo(userId, clientCreateItem);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for creating a new Client for User
     * @param userId ID of User relative to client (required)
     * @param clientCreateItem JsonApi with the Client object to add (required)
     * @return ApiResponse&lt;ClientItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClientItem> addClientWithHttpInfo(String userId, ClientCreateItem clientCreateItem) throws ApiException {
        com.squareup.okhttp.Call call = addClientCall(userId, clientCreateItem, null, null);
        Type localVarReturnType = new TypeToken<ClientItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for creating a new Client for User
     * @param userId ID of User relative to client (required)
     * @param clientCreateItem JsonApi with the Client object to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addClientAsync(String userId, ClientCreateItem clientCreateItem, final ApiCallback<ClientItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addClientCall(userId, clientCreateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClientItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addEvent */
    private com.squareup.okhttp.Call addEventCall(String processId, EventCreateItem eventCreateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = eventCreateItem;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling addEvent(Async)");
        }
        
        // verify the required parameter 'eventCreateItem' is set
        if (eventCreateItem == null) {
            throw new ApiException("Missing the required parameter 'eventCreateItem' when calling addEvent(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/events".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for creating a new event.
     * @param processId ID of Process relative to task (required)
     * @param eventCreateItem JsonApi with the Event object to add (required)
     * @return EventItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventItem addEvent(String processId, EventCreateItem eventCreateItem) throws ApiException {
        ApiResponse<EventItem> resp = addEventWithHttpInfo(processId, eventCreateItem);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for creating a new event.
     * @param processId ID of Process relative to task (required)
     * @param eventCreateItem JsonApi with the Event object to add (required)
     * @return ApiResponse&lt;EventItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventItem> addEventWithHttpInfo(String processId, EventCreateItem eventCreateItem) throws ApiException {
        com.squareup.okhttp.Call call = addEventCall(processId, eventCreateItem, null, null);
        Type localVarReturnType = new TypeToken<EventItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for creating a new event.
     * @param processId ID of Process relative to task (required)
     * @param eventCreateItem JsonApi with the Event object to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addEventAsync(String processId, EventCreateItem eventCreateItem, final ApiCallback<EventItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addEventCall(processId, eventCreateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addFlow */
    private com.squareup.okhttp.Call addFlowCall(String processId, FlowCreateItem flowCreateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = flowCreateItem;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling addFlow(Async)");
        }
        
        // verify the required parameter 'flowCreateItem' is set
        if (flowCreateItem == null) {
            throw new ApiException("Missing the required parameter 'flowCreateItem' when calling addFlow(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/flows".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for creating a new Sequence flow
     * @param processId ID of Process relative to flow (required)
     * @param flowCreateItem JsonApi with the Flow object to add (required)
     * @return FlowItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FlowItem addFlow(String processId, FlowCreateItem flowCreateItem) throws ApiException {
        ApiResponse<FlowItem> resp = addFlowWithHttpInfo(processId, flowCreateItem);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for creating a new Sequence flow
     * @param processId ID of Process relative to flow (required)
     * @param flowCreateItem JsonApi with the Flow object to add (required)
     * @return ApiResponse&lt;FlowItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FlowItem> addFlowWithHttpInfo(String processId, FlowCreateItem flowCreateItem) throws ApiException {
        com.squareup.okhttp.Call call = addFlowCall(processId, flowCreateItem, null, null);
        Type localVarReturnType = new TypeToken<FlowItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for creating a new Sequence flow
     * @param processId ID of Process relative to flow (required)
     * @param flowCreateItem JsonApi with the Flow object to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addFlowAsync(String processId, FlowCreateItem flowCreateItem, final ApiCallback<FlowItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addFlowCall(processId, flowCreateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FlowItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addGateway */
    private com.squareup.okhttp.Call addGatewayCall(String processId, GatewayCreateItem gatewayCreateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = gatewayCreateItem;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling addGateway(Async)");
        }
        
        // verify the required parameter 'gatewayCreateItem' is set
        if (gatewayCreateItem == null) {
            throw new ApiException("Missing the required parameter 'gatewayCreateItem' when calling addGateway(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/gateways".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for creating a new gateway.
     * @param processId ID of Process relative to gateway (required)
     * @param gatewayCreateItem JsonApi with the Gateway object to add (required)
     * @return GatewayItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GatewayItem addGateway(String processId, GatewayCreateItem gatewayCreateItem) throws ApiException {
        ApiResponse<GatewayItem> resp = addGatewayWithHttpInfo(processId, gatewayCreateItem);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for creating a new gateway.
     * @param processId ID of Process relative to gateway (required)
     * @param gatewayCreateItem JsonApi with the Gateway object to add (required)
     * @return ApiResponse&lt;GatewayItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GatewayItem> addGatewayWithHttpInfo(String processId, GatewayCreateItem gatewayCreateItem) throws ApiException {
        com.squareup.okhttp.Call call = addGatewayCall(processId, gatewayCreateItem, null, null);
        Type localVarReturnType = new TypeToken<GatewayItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for creating a new gateway.
     * @param processId ID of Process relative to gateway (required)
     * @param gatewayCreateItem JsonApi with the Gateway object to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addGatewayAsync(String processId, GatewayCreateItem gatewayCreateItem, final ApiCallback<GatewayItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addGatewayCall(processId, gatewayCreateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GatewayItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addGroup */
    private com.squareup.okhttp.Call addGroupCall(GroupCreateItem groupCreateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = groupCreateItem;
        
        // verify the required parameter 'groupCreateItem' is set
        if (groupCreateItem == null) {
            throw new ApiException("Missing the required parameter 'groupCreateItem' when calling addGroup(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/groups".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for creating a new group.
     * @param groupCreateItem JsonApi with the Group object to add (required)
     * @return GroupItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GroupItem addGroup(GroupCreateItem groupCreateItem) throws ApiException {
        ApiResponse<GroupItem> resp = addGroupWithHttpInfo(groupCreateItem);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for creating a new group.
     * @param groupCreateItem JsonApi with the Group object to add (required)
     * @return ApiResponse&lt;GroupItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GroupItem> addGroupWithHttpInfo(GroupCreateItem groupCreateItem) throws ApiException {
        com.squareup.okhttp.Call call = addGroupCall(groupCreateItem, null, null);
        Type localVarReturnType = new TypeToken<GroupItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for creating a new group.
     * @param groupCreateItem JsonApi with the Group object to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addGroupAsync(GroupCreateItem groupCreateItem, final ApiCallback<GroupItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addGroupCall(groupCreateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GroupItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addGroupsToTask */
    private com.squareup.okhttp.Call addGroupsToTaskCall(String processId, String taskId, TaskAddGroupsItem taskAddGroupsItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taskAddGroupsItem;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling addGroupsToTask(Async)");
        }
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling addGroupsToTask(Async)");
        }
        
        // verify the required parameter 'taskAddGroupsItem' is set
        if (taskAddGroupsItem == null) {
            throw new ApiException("Missing the required parameter 'taskAddGroupsItem' when calling addGroupsToTask(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/tasks/{task_id}/groups".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for assignment group(s) to the choosen task
     * @param processId ID of Process (required)
     * @param taskId ID of Task to modify (required)
     * @param taskAddGroupsItem JsonApi with Groups ids to add (required)
     * @return ResultSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultSuccess addGroupsToTask(String processId, String taskId, TaskAddGroupsItem taskAddGroupsItem) throws ApiException {
        ApiResponse<ResultSuccess> resp = addGroupsToTaskWithHttpInfo(processId, taskId, taskAddGroupsItem);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for assignment group(s) to the choosen task
     * @param processId ID of Process (required)
     * @param taskId ID of Task to modify (required)
     * @param taskAddGroupsItem JsonApi with Groups ids to add (required)
     * @return ApiResponse&lt;ResultSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultSuccess> addGroupsToTaskWithHttpInfo(String processId, String taskId, TaskAddGroupsItem taskAddGroupsItem) throws ApiException {
        com.squareup.okhttp.Call call = addGroupsToTaskCall(processId, taskId, taskAddGroupsItem, null, null);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for assignment group(s) to the choosen task
     * @param processId ID of Process (required)
     * @param taskId ID of Task to modify (required)
     * @param taskAddGroupsItem JsonApi with Groups ids to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addGroupsToTaskAsync(String processId, String taskId, TaskAddGroupsItem taskAddGroupsItem, final ApiCallback<ResultSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addGroupsToTaskCall(processId, taskId, taskAddGroupsItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addInputOutput */
    private com.squareup.okhttp.Call addInputOutputCall(String processId, String taskId, InputOutputCreateItem inputOutputCreateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = inputOutputCreateItem;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling addInputOutput(Async)");
        }
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling addInputOutput(Async)");
        }
        
        // verify the required parameter 'inputOutputCreateItem' is set
        if (inputOutputCreateItem == null) {
            throw new ApiException("Missing the required parameter 'inputOutputCreateItem' when calling addInputOutput(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/tasks/{task_id}/inputoutput".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for creating a new InputOutput
     * @param processId Process ID related to InputOutput object (required)
     * @param taskId Task instance ID related to InputOutput object (required)
     * @param inputOutputCreateItem Create and add a new InputOutput object with JSON API (required)
     * @return InputOutputItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InputOutputItem addInputOutput(String processId, String taskId, InputOutputCreateItem inputOutputCreateItem) throws ApiException {
        ApiResponse<InputOutputItem> resp = addInputOutputWithHttpInfo(processId, taskId, inputOutputCreateItem);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for creating a new InputOutput
     * @param processId Process ID related to InputOutput object (required)
     * @param taskId Task instance ID related to InputOutput object (required)
     * @param inputOutputCreateItem Create and add a new InputOutput object with JSON API (required)
     * @return ApiResponse&lt;InputOutputItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InputOutputItem> addInputOutputWithHttpInfo(String processId, String taskId, InputOutputCreateItem inputOutputCreateItem) throws ApiException {
        com.squareup.okhttp.Call call = addInputOutputCall(processId, taskId, inputOutputCreateItem, null, null);
        Type localVarReturnType = new TypeToken<InputOutputItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for creating a new InputOutput
     * @param processId Process ID related to InputOutput object (required)
     * @param taskId Task instance ID related to InputOutput object (required)
     * @param inputOutputCreateItem Create and add a new InputOutput object with JSON API (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addInputOutputAsync(String processId, String taskId, InputOutputCreateItem inputOutputCreateItem, final ApiCallback<InputOutputItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addInputOutputCall(processId, taskId, inputOutputCreateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InputOutputItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addInstance */
    private com.squareup.okhttp.Call addInstanceCall(String processId, InstanceCreateItem instanceCreateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = instanceCreateItem;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling addInstance(Async)");
        }
        
        // verify the required parameter 'instanceCreateItem' is set
        if (instanceCreateItem == null) {
            throw new ApiException("Missing the required parameter 'instanceCreateItem' when calling addInstance(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/instances".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for creating a new instance.
     * @param processId Process ID relative to instance (required)
     * @param instanceCreateItem JsonApi with the Instance object to add (required)
     * @return InstanceItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InstanceItem addInstance(String processId, InstanceCreateItem instanceCreateItem) throws ApiException {
        ApiResponse<InstanceItem> resp = addInstanceWithHttpInfo(processId, instanceCreateItem);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for creating a new instance.
     * @param processId Process ID relative to instance (required)
     * @param instanceCreateItem JsonApi with the Instance object to add (required)
     * @return ApiResponse&lt;InstanceItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InstanceItem> addInstanceWithHttpInfo(String processId, InstanceCreateItem instanceCreateItem) throws ApiException {
        com.squareup.okhttp.Call call = addInstanceCall(processId, instanceCreateItem, null, null);
        Type localVarReturnType = new TypeToken<InstanceItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for creating a new instance.
     * @param processId Process ID relative to instance (required)
     * @param instanceCreateItem JsonApi with the Instance object to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addInstanceAsync(String processId, InstanceCreateItem instanceCreateItem, final ApiCallback<InstanceItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addInstanceCall(processId, instanceCreateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InstanceItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addProcess */
    private com.squareup.okhttp.Call addProcessCall(ProcessCreateItem processCreateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = processCreateItem;
        
        // verify the required parameter 'processCreateItem' is set
        if (processCreateItem == null) {
            throw new ApiException("Missing the required parameter 'processCreateItem' when calling addProcess(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is responsible for creating a new process
     * @param processCreateItem JsonApi with the Process object to add (required)
     * @return ProcessItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProcessItem addProcess(ProcessCreateItem processCreateItem) throws ApiException {
        ApiResponse<ProcessItem> resp = addProcessWithHttpInfo(processCreateItem);
        return resp.getData();
    }

    /**
     * 
     * This method is responsible for creating a new process
     * @param processCreateItem JsonApi with the Process object to add (required)
     * @return ApiResponse&lt;ProcessItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProcessItem> addProcessWithHttpInfo(ProcessCreateItem processCreateItem) throws ApiException {
        com.squareup.okhttp.Call call = addProcessCall(processCreateItem, null, null);
        Type localVarReturnType = new TypeToken<ProcessItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is responsible for creating a new process
     * @param processCreateItem JsonApi with the Process object to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addProcessAsync(ProcessCreateItem processCreateItem, final ApiCallback<ProcessItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addProcessCall(processCreateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProcessItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addTask */
    private com.squareup.okhttp.Call addTaskCall(String processId, TaskCreateItem taskCreateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taskCreateItem;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling addTask(Async)");
        }
        
        // verify the required parameter 'taskCreateItem' is set
        if (taskCreateItem == null) {
            throw new ApiException("Missing the required parameter 'taskCreateItem' when calling addTask(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/tasks".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for creating a new task.
     * @param processId ID of Process relative to task (required)
     * @param taskCreateItem JsonApi with the Task object to add (required)
     * @return TaskItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskItem addTask(String processId, TaskCreateItem taskCreateItem) throws ApiException {
        ApiResponse<TaskItem> resp = addTaskWithHttpInfo(processId, taskCreateItem);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for creating a new task.
     * @param processId ID of Process relative to task (required)
     * @param taskCreateItem JsonApi with the Task object to add (required)
     * @return ApiResponse&lt;TaskItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskItem> addTaskWithHttpInfo(String processId, TaskCreateItem taskCreateItem) throws ApiException {
        com.squareup.okhttp.Call call = addTaskCall(processId, taskCreateItem, null, null);
        Type localVarReturnType = new TypeToken<TaskItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for creating a new task.
     * @param processId ID of Process relative to task (required)
     * @param taskCreateItem JsonApi with the Task object to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addTaskAsync(String processId, TaskCreateItem taskCreateItem, final ApiCallback<TaskItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addTaskCall(processId, taskCreateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addUser */
    private com.squareup.okhttp.Call addUserCall(UserCreateItem userCreateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = userCreateItem;
        
        // verify the required parameter 'userCreateItem' is set
        if (userCreateItem == null) {
            throw new ApiException("Missing the required parameter 'userCreateItem' when calling addUser(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/users".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for creating a new user in the system.
     * @param userCreateItem JsonApi with the User object to add (required)
     * @return UserItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserItem addUser(UserCreateItem userCreateItem) throws ApiException {
        ApiResponse<UserItem> resp = addUserWithHttpInfo(userCreateItem);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for creating a new user in the system.
     * @param userCreateItem JsonApi with the User object to add (required)
     * @return ApiResponse&lt;UserItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserItem> addUserWithHttpInfo(UserCreateItem userCreateItem) throws ApiException {
        com.squareup.okhttp.Call call = addUserCall(userCreateItem, null, null);
        Type localVarReturnType = new TypeToken<UserItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for creating a new user in the system.
     * @param userCreateItem JsonApi with the User object to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addUserAsync(UserCreateItem userCreateItem, final ApiCallback<UserItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addUserCall(userCreateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addUsersToGroup */
    private com.squareup.okhttp.Call addUsersToGroupCall(String id, GroupAddUsersItem groupAddUsersItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = groupAddUsersItem;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addUsersToGroup(Async)");
        }
        
        // verify the required parameter 'groupAddUsersItem' is set
        if (groupAddUsersItem == null) {
            throw new ApiException("Missing the required parameter 'groupAddUsersItem' when calling addUsersToGroup(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/groups/{id}/users".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for adding one, or more new users to a group.
     * @param id ID of Group to modify (required)
     * @param groupAddUsersItem JsonApi with Users ids to add (required)
     * @return ResultSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultSuccess addUsersToGroup(String id, GroupAddUsersItem groupAddUsersItem) throws ApiException {
        ApiResponse<ResultSuccess> resp = addUsersToGroupWithHttpInfo(id, groupAddUsersItem);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for adding one, or more new users to a group.
     * @param id ID of Group to modify (required)
     * @param groupAddUsersItem JsonApi with Users ids to add (required)
     * @return ApiResponse&lt;ResultSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultSuccess> addUsersToGroupWithHttpInfo(String id, GroupAddUsersItem groupAddUsersItem) throws ApiException {
        com.squareup.okhttp.Call call = addUsersToGroupCall(id, groupAddUsersItem, null, null);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for adding one, or more new users to a group.
     * @param id ID of Group to modify (required)
     * @param groupAddUsersItem JsonApi with Users ids to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addUsersToGroupAsync(String id, GroupAddUsersItem groupAddUsersItem, final ApiCallback<ResultSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addUsersToGroupCall(id, groupAddUsersItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteClient */
    private com.squareup.okhttp.Call deleteClientCall(String userId, String clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteClient(Async)");
        }
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling deleteClient(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/users/{user_id}/clients/{client_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()))
        .replaceAll("\\{" + "client_id" + "\\}", apiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for deleting a single item based on the Client and User IDs.
     * @param userId ID of of User item (required)
     * @param clientId ID of item to delete (required)
     * @return ResultSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultSuccess deleteClient(String userId, String clientId) throws ApiException {
        ApiResponse<ResultSuccess> resp = deleteClientWithHttpInfo(userId, clientId);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for deleting a single item based on the Client and User IDs.
     * @param userId ID of of User item (required)
     * @param clientId ID of item to delete (required)
     * @return ApiResponse&lt;ResultSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultSuccess> deleteClientWithHttpInfo(String userId, String clientId) throws ApiException {
        com.squareup.okhttp.Call call = deleteClientCall(userId, clientId, null, null);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for deleting a single item based on the Client and User IDs.
     * @param userId ID of of User item (required)
     * @param clientId ID of item to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteClientAsync(String userId, String clientId, final ApiCallback<ResultSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteClientCall(userId, clientId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteEvent */
    private com.squareup.okhttp.Call deleteEventCall(String processId, String eventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling deleteEvent(Async)");
        }
        
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling deleteEvent(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/events/{event_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "event_id" + "\\}", apiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for deleting a single item based on event_id and Process ID.
     * @param processId ID of of Process item (required)
     * @param eventId ID of item to delete (required)
     * @return ResultSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultSuccess deleteEvent(String processId, String eventId) throws ApiException {
        ApiResponse<ResultSuccess> resp = deleteEventWithHttpInfo(processId, eventId);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for deleting a single item based on event_id and Process ID.
     * @param processId ID of of Process item (required)
     * @param eventId ID of item to delete (required)
     * @return ApiResponse&lt;ResultSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultSuccess> deleteEventWithHttpInfo(String processId, String eventId) throws ApiException {
        com.squareup.okhttp.Call call = deleteEventCall(processId, eventId, null, null);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for deleting a single item based on event_id and Process ID.
     * @param processId ID of of Process item (required)
     * @param eventId ID of item to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteEventAsync(String processId, String eventId, final ApiCallback<ResultSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteEventCall(processId, eventId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteFlow */
    private com.squareup.okhttp.Call deleteFlowCall(String processId, String flowId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling deleteFlow(Async)");
        }
        
        // verify the required parameter 'flowId' is set
        if (flowId == null) {
            throw new ApiException("Missing the required parameter 'flowId' when calling deleteFlow(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/flows/{flow_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "flow_id" + "\\}", apiClient.escapeString(flowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for deleting a single item based on the flow_id and Process ID.
     * @param processId ID of of Process item (required)
     * @param flowId ID of item to delete (required)
     * @return ResultSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultSuccess deleteFlow(String processId, String flowId) throws ApiException {
        ApiResponse<ResultSuccess> resp = deleteFlowWithHttpInfo(processId, flowId);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for deleting a single item based on the flow_id and Process ID.
     * @param processId ID of of Process item (required)
     * @param flowId ID of item to delete (required)
     * @return ApiResponse&lt;ResultSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultSuccess> deleteFlowWithHttpInfo(String processId, String flowId) throws ApiException {
        com.squareup.okhttp.Call call = deleteFlowCall(processId, flowId, null, null);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for deleting a single item based on the flow_id and Process ID.
     * @param processId ID of of Process item (required)
     * @param flowId ID of item to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFlowAsync(String processId, String flowId, final ApiCallback<ResultSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFlowCall(processId, flowId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteGateway */
    private com.squareup.okhttp.Call deleteGatewayCall(String processId, String gatewayId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling deleteGateway(Async)");
        }
        
        // verify the required parameter 'gatewayId' is set
        if (gatewayId == null) {
            throw new ApiException("Missing the required parameter 'gatewayId' when calling deleteGateway(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/gateways/{gateway_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "gateway_id" + "\\}", apiClient.escapeString(gatewayId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for deleting a single item based on the gateway_id and Process ID.
     * @param processId ID of of Process item (required)
     * @param gatewayId ID of item to delete (required)
     * @return ResultSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultSuccess deleteGateway(String processId, String gatewayId) throws ApiException {
        ApiResponse<ResultSuccess> resp = deleteGatewayWithHttpInfo(processId, gatewayId);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for deleting a single item based on the gateway_id and Process ID.
     * @param processId ID of of Process item (required)
     * @param gatewayId ID of item to delete (required)
     * @return ApiResponse&lt;ResultSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultSuccess> deleteGatewayWithHttpInfo(String processId, String gatewayId) throws ApiException {
        com.squareup.okhttp.Call call = deleteGatewayCall(processId, gatewayId, null, null);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for deleting a single item based on the gateway_id and Process ID.
     * @param processId ID of of Process item (required)
     * @param gatewayId ID of item to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteGatewayAsync(String processId, String gatewayId, final ApiCallback<ResultSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteGatewayCall(processId, gatewayId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteGroup */
    private com.squareup.okhttp.Call deleteGroupCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteGroup(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/groups/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for deleting a single item based on the itemâ€™s ID.
     * @param id ID of item to delete (required)
     * @return ResultSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultSuccess deleteGroup(String id) throws ApiException {
        ApiResponse<ResultSuccess> resp = deleteGroupWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for deleting a single item based on the itemâ€™s ID.
     * @param id ID of item to delete (required)
     * @return ApiResponse&lt;ResultSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultSuccess> deleteGroupWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = deleteGroupCall(id, null, null);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for deleting a single item based on the itemâ€™s ID.
     * @param id ID of item to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteGroupAsync(String id, final ApiCallback<ResultSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteGroupCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteInputOutput */
    private com.squareup.okhttp.Call deleteInputOutputCall(String processId, String taskId, String inputoutputUid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling deleteInputOutput(Async)");
        }
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling deleteInputOutput(Async)");
        }
        
        // verify the required parameter 'inputoutputUid' is set
        if (inputoutputUid == null) {
            throw new ApiException("Missing the required parameter 'inputoutputUid' when calling deleteInputOutput(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/tasks/{task_id}/inputoutput/{inputoutput_uid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()))
        .replaceAll("\\{" + "inputoutput_uid" + "\\}", apiClient.escapeString(inputoutputUid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for deleting a single item based on the InputOutput ID, Process ID and Task ID
     * @param processId Process ID related to InputOutput object (required)
     * @param taskId Task instance ID related to InputOutput object (required)
     * @param inputoutputUid ID of InputOutput to fetch (required)
     * @return ResultSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultSuccess deleteInputOutput(String processId, String taskId, String inputoutputUid) throws ApiException {
        ApiResponse<ResultSuccess> resp = deleteInputOutputWithHttpInfo(processId, taskId, inputoutputUid);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for deleting a single item based on the InputOutput ID, Process ID and Task ID
     * @param processId Process ID related to InputOutput object (required)
     * @param taskId Task instance ID related to InputOutput object (required)
     * @param inputoutputUid ID of InputOutput to fetch (required)
     * @return ApiResponse&lt;ResultSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultSuccess> deleteInputOutputWithHttpInfo(String processId, String taskId, String inputoutputUid) throws ApiException {
        com.squareup.okhttp.Call call = deleteInputOutputCall(processId, taskId, inputoutputUid, null, null);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for deleting a single item based on the InputOutput ID, Process ID and Task ID
     * @param processId Process ID related to InputOutput object (required)
     * @param taskId Task instance ID related to InputOutput object (required)
     * @param inputoutputUid ID of InputOutput to fetch (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteInputOutputAsync(String processId, String taskId, String inputoutputUid, final ApiCallback<ResultSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteInputOutputCall(processId, taskId, inputoutputUid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteInstance */
    private com.squareup.okhttp.Call deleteInstanceCall(String processId, String instanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling deleteInstance(Async)");
        }
        
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling deleteInstance(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/instances/{instance_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "instance_id" + "\\}", apiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for deleting a single item based on the instance ID and Process ID.
     * @param processId ID of of Process item (required)
     * @param instanceId ID of item to delete (required)
     * @return ResultSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultSuccess deleteInstance(String processId, String instanceId) throws ApiException {
        ApiResponse<ResultSuccess> resp = deleteInstanceWithHttpInfo(processId, instanceId);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for deleting a single item based on the instance ID and Process ID.
     * @param processId ID of of Process item (required)
     * @param instanceId ID of item to delete (required)
     * @return ApiResponse&lt;ResultSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultSuccess> deleteInstanceWithHttpInfo(String processId, String instanceId) throws ApiException {
        com.squareup.okhttp.Call call = deleteInstanceCall(processId, instanceId, null, null);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for deleting a single item based on the instance ID and Process ID.
     * @param processId ID of of Process item (required)
     * @param instanceId ID of item to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteInstanceAsync(String processId, String instanceId, final ApiCallback<ResultSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteInstanceCall(processId, instanceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteProcess */
    private com.squareup.okhttp.Call deleteProcessCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteProcess(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for deleting a single item based on the itemâ€™s ID. 
     * @param id ID of item to delete (required)
     * @return ResultSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultSuccess deleteProcess(String id) throws ApiException {
        ApiResponse<ResultSuccess> resp = deleteProcessWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for deleting a single item based on the itemâ€™s ID. 
     * @param id ID of item to delete (required)
     * @return ApiResponse&lt;ResultSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultSuccess> deleteProcessWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = deleteProcessCall(id, null, null);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for deleting a single item based on the itemâ€™s ID. 
     * @param id ID of item to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteProcessAsync(String id, final ApiCallback<ResultSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteProcessCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteTask */
    private com.squareup.okhttp.Call deleteTaskCall(String processId, String taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling deleteTask(Async)");
        }
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling deleteTask(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/tasks/{task_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for deleting a single item based on task_id and Process ID.
     * @param processId ID of of Process item (required)
     * @param taskId ID of item to delete (required)
     * @return ResultSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultSuccess deleteTask(String processId, String taskId) throws ApiException {
        ApiResponse<ResultSuccess> resp = deleteTaskWithHttpInfo(processId, taskId);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for deleting a single item based on task_id and Process ID.
     * @param processId ID of of Process item (required)
     * @param taskId ID of item to delete (required)
     * @return ApiResponse&lt;ResultSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultSuccess> deleteTaskWithHttpInfo(String processId, String taskId) throws ApiException {
        com.squareup.okhttp.Call call = deleteTaskCall(processId, taskId, null, null);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for deleting a single item based on task_id and Process ID.
     * @param processId ID of of Process item (required)
     * @param taskId ID of item to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTaskAsync(String processId, String taskId, final ApiCallback<ResultSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTaskCall(processId, taskId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteUser */
    private com.squareup.okhttp.Call deleteUserCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteUser(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/users/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method deletes User from the system.
     * @param id ID of item to delete (required)
     * @return ResultSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultSuccess deleteUser(String id) throws ApiException {
        ApiResponse<ResultSuccess> resp = deleteUserWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * 
     * This method deletes User from the system.
     * @param id ID of item to delete (required)
     * @return ApiResponse&lt;ResultSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultSuccess> deleteUserWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = deleteUserCall(id, null, null);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method deletes User from the system.
     * @param id ID of item to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUserAsync(String id, final ApiCallback<ResultSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteUserCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for eventTrigger */
    private com.squareup.okhttp.Call eventTriggerCall(String processId, String eventId, TriggerEventCreateItem triggerEventCreateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = triggerEventCreateItem;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling eventTrigger(Async)");
        }
        
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling eventTrigger(Async)");
        }
        
        // verify the required parameter 'triggerEventCreateItem' is set
        if (triggerEventCreateItem == null) {
            throw new ApiException("Missing the required parameter 'triggerEventCreateItem' when calling eventTrigger(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/events/{event_id}/trigger".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "event_id" + "\\}", apiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for creating an event.
     * @param processId ID of Process relative to event (required)
     * @param eventId ID of Event to trigger (required)
     * @param triggerEventCreateItem Json with some parameters (required)
     * @return DataModelItem1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DataModelItem1 eventTrigger(String processId, String eventId, TriggerEventCreateItem triggerEventCreateItem) throws ApiException {
        ApiResponse<DataModelItem1> resp = eventTriggerWithHttpInfo(processId, eventId, triggerEventCreateItem);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for creating an event.
     * @param processId ID of Process relative to event (required)
     * @param eventId ID of Event to trigger (required)
     * @param triggerEventCreateItem Json with some parameters (required)
     * @return ApiResponse&lt;DataModelItem1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DataModelItem1> eventTriggerWithHttpInfo(String processId, String eventId, TriggerEventCreateItem triggerEventCreateItem) throws ApiException {
        com.squareup.okhttp.Call call = eventTriggerCall(processId, eventId, triggerEventCreateItem, null, null);
        Type localVarReturnType = new TypeToken<DataModelItem1>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for creating an event.
     * @param processId ID of Process relative to event (required)
     * @param eventId ID of Event to trigger (required)
     * @param triggerEventCreateItem Json with some parameters (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call eventTriggerAsync(String processId, String eventId, TriggerEventCreateItem triggerEventCreateItem, final ApiCallback<DataModelItem1> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = eventTriggerCall(processId, eventId, triggerEventCreateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DataModelItem1>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findClientById */
    private com.squareup.okhttp.Call findClientByIdCall(String userId, String clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling findClientById(Async)");
        }
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling findClientById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/users/{user_id}/clients/{client_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()))
        .replaceAll("\\{" + "client_id" + "\\}", apiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for retrieving a client based on ID.
     * @param userId ID of User to fetch (required)
     * @param clientId ID of Client to fetch (required)
     * @return ClientItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClientItem findClientById(String userId, String clientId) throws ApiException {
        ApiResponse<ClientItem> resp = findClientByIdWithHttpInfo(userId, clientId);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for retrieving a client based on ID.
     * @param userId ID of User to fetch (required)
     * @param clientId ID of Client to fetch (required)
     * @return ApiResponse&lt;ClientItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClientItem> findClientByIdWithHttpInfo(String userId, String clientId) throws ApiException {
        com.squareup.okhttp.Call call = findClientByIdCall(userId, clientId, null, null);
        Type localVarReturnType = new TypeToken<ClientItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for retrieving a client based on ID.
     * @param userId ID of User to fetch (required)
     * @param clientId ID of Client to fetch (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findClientByIdAsync(String userId, String clientId, final ApiCallback<ClientItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findClientByIdCall(userId, clientId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClientItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findClients */
    private com.squareup.okhttp.Call findClientsCall(String userId, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling findClients(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/users/{user_id}/clients".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for retrieving all existing clients of user.
     * @param userId ID of User relative to clients (required)
     * @param page Page Nr to fetch (optional, default to 1)
     * @param perPage Amount of Items per Page (optional, default to 15)
     * @return ClientCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClientCollection findClients(String userId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<ClientCollection> resp = findClientsWithHttpInfo(userId, page, perPage);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for retrieving all existing clients of user.
     * @param userId ID of User relative to clients (required)
     * @param page Page Nr to fetch (optional, default to 1)
     * @param perPage Amount of Items per Page (optional, default to 15)
     * @return ApiResponse&lt;ClientCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClientCollection> findClientsWithHttpInfo(String userId, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = findClientsCall(userId, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<ClientCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for retrieving all existing clients of user.
     * @param userId ID of User relative to clients (required)
     * @param page Page Nr to fetch (optional, default to 1)
     * @param perPage Amount of Items per Page (optional, default to 15)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findClientsAsync(String userId, Integer page, Integer perPage, final ApiCallback<ClientCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findClientsCall(userId, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClientCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findDataModel */
    private com.squareup.okhttp.Call findDataModelCall(String processId, String instanceId, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling findDataModel(Async)");
        }
        
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling findDataModel(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/instances/{instance_id}/datamodel".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "instance_id" + "\\}", apiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method returns the instance DataModel and lets work with it directly
     * @param processId ID of Process to fetch (required)
     * @param instanceId ID of Instance to fetch (required)
     * @param page Page Nr to fetch (optional, default to 1)
     * @param perPage Amount of Items per Page (optional, default to 15)
     * @return DataModelItem1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DataModelItem1 findDataModel(String processId, String instanceId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<DataModelItem1> resp = findDataModelWithHttpInfo(processId, instanceId, page, perPage);
        return resp.getData();
    }

    /**
     * 
     * This method returns the instance DataModel and lets work with it directly
     * @param processId ID of Process to fetch (required)
     * @param instanceId ID of Instance to fetch (required)
     * @param page Page Nr to fetch (optional, default to 1)
     * @param perPage Amount of Items per Page (optional, default to 15)
     * @return ApiResponse&lt;DataModelItem1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DataModelItem1> findDataModelWithHttpInfo(String processId, String instanceId, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = findDataModelCall(processId, instanceId, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<DataModelItem1>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method returns the instance DataModel and lets work with it directly
     * @param processId ID of Process to fetch (required)
     * @param instanceId ID of Instance to fetch (required)
     * @param page Page Nr to fetch (optional, default to 1)
     * @param perPage Amount of Items per Page (optional, default to 15)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findDataModelAsync(String processId, String instanceId, Integer page, Integer perPage, final ApiCallback<DataModelItem1> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findDataModelCall(processId, instanceId, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DataModelItem1>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findEventById */
    private com.squareup.okhttp.Call findEventByIdCall(String processId, String eventId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling findEventById(Async)");
        }
        
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling findEventById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/events/{event_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "event_id" + "\\}", apiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for retrieving an event based on itâ€™s ID.
     * @param processId ID of Process to fetch (required)
     * @param eventId ID of Event to fetch (required)
     * @return EventItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventItem findEventById(String processId, String eventId) throws ApiException {
        ApiResponse<EventItem> resp = findEventByIdWithHttpInfo(processId, eventId);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for retrieving an event based on itâ€™s ID.
     * @param processId ID of Process to fetch (required)
     * @param eventId ID of Event to fetch (required)
     * @return ApiResponse&lt;EventItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventItem> findEventByIdWithHttpInfo(String processId, String eventId) throws ApiException {
        com.squareup.okhttp.Call call = findEventByIdCall(processId, eventId, null, null);
        Type localVarReturnType = new TypeToken<EventItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for retrieving an event based on itâ€™s ID.
     * @param processId ID of Process to fetch (required)
     * @param eventId ID of Event to fetch (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findEventByIdAsync(String processId, String eventId, final ApiCallback<EventItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findEventByIdCall(processId, eventId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findEvents */
    private com.squareup.okhttp.Call findEventsCall(String processId, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling findEvents(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/events".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method returns all events related to the runned process
     * @param processId ID of Process relative to event (required)
     * @param page Page Nr to fetch (optional, default to 1)
     * @param perPage Amount of Items per Page (optional, default to 15)
     * @return EventCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventCollection findEvents(String processId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<EventCollection> resp = findEventsWithHttpInfo(processId, page, perPage);
        return resp.getData();
    }

    /**
     * 
     * This method returns all events related to the runned process
     * @param processId ID of Process relative to event (required)
     * @param page Page Nr to fetch (optional, default to 1)
     * @param perPage Amount of Items per Page (optional, default to 15)
     * @return ApiResponse&lt;EventCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventCollection> findEventsWithHttpInfo(String processId, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = findEventsCall(processId, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<EventCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method returns all events related to the runned process
     * @param processId ID of Process relative to event (required)
     * @param page Page Nr to fetch (optional, default to 1)
     * @param perPage Amount of Items per Page (optional, default to 15)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findEventsAsync(String processId, Integer page, Integer perPage, final ApiCallback<EventCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findEventsCall(processId, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findFlowById */
    private com.squareup.okhttp.Call findFlowByIdCall(String processId, String flowId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling findFlowById(Async)");
        }
        
        // verify the required parameter 'flowId' is set
        if (flowId == null) {
            throw new ApiException("Missing the required parameter 'flowId' when calling findFlowById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/flows/{flow_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "flow_id" + "\\}", apiClient.escapeString(flowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for retrieving a flow based on itâ€™s ID.
     * @param processId ID of Process to fetch (required)
     * @param flowId ID of Flow to fetch (required)
     * @return FlowItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FlowItem findFlowById(String processId, String flowId) throws ApiException {
        ApiResponse<FlowItem> resp = findFlowByIdWithHttpInfo(processId, flowId);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for retrieving a flow based on itâ€™s ID.
     * @param processId ID of Process to fetch (required)
     * @param flowId ID of Flow to fetch (required)
     * @return ApiResponse&lt;FlowItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FlowItem> findFlowByIdWithHttpInfo(String processId, String flowId) throws ApiException {
        com.squareup.okhttp.Call call = findFlowByIdCall(processId, flowId, null, null);
        Type localVarReturnType = new TypeToken<FlowItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for retrieving a flow based on itâ€™s ID.
     * @param processId ID of Process to fetch (required)
     * @param flowId ID of Flow to fetch (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findFlowByIdAsync(String processId, String flowId, final ApiCallback<FlowItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findFlowByIdCall(processId, flowId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FlowItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findFlows */
    private com.squareup.okhttp.Call findFlowsCall(String processId, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling findFlows(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/flows".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for retrieving all existing flows.
     * @param processId ID of Process relative to flow (required)
     * @param page Page Nr to fetch (optional, default to 1)
     * @param perPage Amount of Items per Page (optional, default to 15)
     * @return FlowCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FlowCollection findFlows(String processId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<FlowCollection> resp = findFlowsWithHttpInfo(processId, page, perPage);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for retrieving all existing flows.
     * @param processId ID of Process relative to flow (required)
     * @param page Page Nr to fetch (optional, default to 1)
     * @param perPage Amount of Items per Page (optional, default to 15)
     * @return ApiResponse&lt;FlowCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FlowCollection> findFlowsWithHttpInfo(String processId, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = findFlowsCall(processId, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<FlowCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for retrieving all existing flows.
     * @param processId ID of Process relative to flow (required)
     * @param page Page Nr to fetch (optional, default to 1)
     * @param perPage Amount of Items per Page (optional, default to 15)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findFlowsAsync(String processId, Integer page, Integer perPage, final ApiCallback<FlowCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findFlowsCall(processId, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FlowCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findGatewayById */
    private com.squareup.okhttp.Call findGatewayByIdCall(String processId, String gatewayId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling findGatewayById(Async)");
        }
        
        // verify the required parameter 'gatewayId' is set
        if (gatewayId == null) {
            throw new ApiException("Missing the required parameter 'gatewayId' when calling findGatewayById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/gateways/{gateway_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "gateway_id" + "\\}", apiClient.escapeString(gatewayId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for retrieving a gateway based on itâ€™s ID.
     * @param processId ID of Process to fetch (required)
     * @param gatewayId ID of Gateway to fetch (required)
     * @return GatewayItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GatewayItem findGatewayById(String processId, String gatewayId) throws ApiException {
        ApiResponse<GatewayItem> resp = findGatewayByIdWithHttpInfo(processId, gatewayId);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for retrieving a gateway based on itâ€™s ID.
     * @param processId ID of Process to fetch (required)
     * @param gatewayId ID of Gateway to fetch (required)
     * @return ApiResponse&lt;GatewayItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GatewayItem> findGatewayByIdWithHttpInfo(String processId, String gatewayId) throws ApiException {
        com.squareup.okhttp.Call call = findGatewayByIdCall(processId, gatewayId, null, null);
        Type localVarReturnType = new TypeToken<GatewayItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for retrieving a gateway based on itâ€™s ID.
     * @param processId ID of Process to fetch (required)
     * @param gatewayId ID of Gateway to fetch (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findGatewayByIdAsync(String processId, String gatewayId, final ApiCallback<GatewayItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findGatewayByIdCall(processId, gatewayId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GatewayItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findGateways */
    private com.squareup.okhttp.Call findGatewaysCall(String processId, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling findGateways(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/gateways".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intending for retrieving all existing gateways.
     * @param processId ID of Process relative to gateway (required)
     * @param page Page Nr to fetch (optional, default to 1)
     * @param perPage Amount of Items per Page (optional, default to 15)
     * @return GatewayCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GatewayCollection findGateways(String processId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<GatewayCollection> resp = findGatewaysWithHttpInfo(processId, page, perPage);
        return resp.getData();
    }

    /**
     * 
     * This method is intending for retrieving all existing gateways.
     * @param processId ID of Process relative to gateway (required)
     * @param page Page Nr to fetch (optional, default to 1)
     * @param perPage Amount of Items per Page (optional, default to 15)
     * @return ApiResponse&lt;GatewayCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GatewayCollection> findGatewaysWithHttpInfo(String processId, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = findGatewaysCall(processId, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<GatewayCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intending for retrieving all existing gateways.
     * @param processId ID of Process relative to gateway (required)
     * @param page Page Nr to fetch (optional, default to 1)
     * @param perPage Amount of Items per Page (optional, default to 15)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findGatewaysAsync(String processId, Integer page, Integer perPage, final ApiCallback<GatewayCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findGatewaysCall(processId, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GatewayCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findGroupById */
    private com.squareup.okhttp.Call findGroupByIdCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling findGroupById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/groups/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is responsible for retrieving a group based on a single ID.
     * @param id ID of Group to fetch (required)
     * @return GroupItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GroupItem findGroupById(String id) throws ApiException {
        ApiResponse<GroupItem> resp = findGroupByIdWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * 
     * This method is responsible for retrieving a group based on a single ID.
     * @param id ID of Group to fetch (required)
     * @return ApiResponse&lt;GroupItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GroupItem> findGroupByIdWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = findGroupByIdCall(id, null, null);
        Type localVarReturnType = new TypeToken<GroupItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is responsible for retrieving a group based on a single ID.
     * @param id ID of Group to fetch (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findGroupByIdAsync(String id, final ApiCallback<GroupItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findGroupByIdCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GroupItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findGroups */
    private com.squareup.okhttp.Call findGroupsCall(Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/groups".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is responsible for retrieving all existing groups.
     * @param page Page Nr to fetch (optional, default to 1)
     * @param perPage Amount of Items per Page (optional, default to 15)
     * @return GroupCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GroupCollection findGroups(Integer page, Integer perPage) throws ApiException {
        ApiResponse<GroupCollection> resp = findGroupsWithHttpInfo(page, perPage);
        return resp.getData();
    }

    /**
     * 
     * This method is responsible for retrieving all existing groups.
     * @param page Page Nr to fetch (optional, default to 1)
     * @param perPage Amount of Items per Page (optional, default to 15)
     * @return ApiResponse&lt;GroupCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GroupCollection> findGroupsWithHttpInfo(Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = findGroupsCall(page, perPage, null, null);
        Type localVarReturnType = new TypeToken<GroupCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is responsible for retrieving all existing groups.
     * @param page Page Nr to fetch (optional, default to 1)
     * @param perPage Amount of Items per Page (optional, default to 15)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findGroupsAsync(Integer page, Integer perPage, final ApiCallback<GroupCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findGroupsCall(page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GroupCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findInputOutputById */
    private com.squareup.okhttp.Call findInputOutputByIdCall(String processId, String taskId, String inputoutputUid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling findInputOutputById(Async)");
        }
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling findInputOutputById(Async)");
        }
        
        // verify the required parameter 'inputoutputUid' is set
        if (inputoutputUid == null) {
            throw new ApiException("Missing the required parameter 'inputoutputUid' when calling findInputOutputById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/tasks/{task_id}/inputoutput/{inputoutput_uid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()))
        .replaceAll("\\{" + "inputoutput_uid" + "\\}", apiClient.escapeString(inputoutputUid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for retrieving an InputOutput object based on ID.
     * @param processId Process ID related to InputOutput object (required)
     * @param taskId Task instance ID related to InputOutput object (required)
     * @param inputoutputUid ID of InputOutput to fetch (required)
     * @return InputOutputItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InputOutputItem findInputOutputById(String processId, String taskId, String inputoutputUid) throws ApiException {
        ApiResponse<InputOutputItem> resp = findInputOutputByIdWithHttpInfo(processId, taskId, inputoutputUid);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for retrieving an InputOutput object based on ID.
     * @param processId Process ID related to InputOutput object (required)
     * @param taskId Task instance ID related to InputOutput object (required)
     * @param inputoutputUid ID of InputOutput to fetch (required)
     * @return ApiResponse&lt;InputOutputItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InputOutputItem> findInputOutputByIdWithHttpInfo(String processId, String taskId, String inputoutputUid) throws ApiException {
        com.squareup.okhttp.Call call = findInputOutputByIdCall(processId, taskId, inputoutputUid, null, null);
        Type localVarReturnType = new TypeToken<InputOutputItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for retrieving an InputOutput object based on ID.
     * @param processId Process ID related to InputOutput object (required)
     * @param taskId Task instance ID related to InputOutput object (required)
     * @param inputoutputUid ID of InputOutput to fetch (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findInputOutputByIdAsync(String processId, String taskId, String inputoutputUid, final ApiCallback<InputOutputItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findInputOutputByIdCall(processId, taskId, inputoutputUid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InputOutputItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findInputOutputs */
    private com.squareup.okhttp.Call findInputOutputsCall(String processId, String taskId, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling findInputOutputs(Async)");
        }
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling findInputOutputs(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/tasks/{task_id}/inputoutput".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for retrieving all existing InputOutput objects for the related task instance.
     * @param processId Process ID related to InputOutput object (required)
     * @param taskId Task instance ID related to InputOutput object (required)
     * @param page Page Nr to fetch (optional, default to 1)
     * @param perPage Amount of Items per Page (optional, default to 15)
     * @return InputOutputCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InputOutputCollection findInputOutputs(String processId, String taskId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<InputOutputCollection> resp = findInputOutputsWithHttpInfo(processId, taskId, page, perPage);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for retrieving all existing InputOutput objects for the related task instance.
     * @param processId Process ID related to InputOutput object (required)
     * @param taskId Task instance ID related to InputOutput object (required)
     * @param page Page Nr to fetch (optional, default to 1)
     * @param perPage Amount of Items per Page (optional, default to 15)
     * @return ApiResponse&lt;InputOutputCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InputOutputCollection> findInputOutputsWithHttpInfo(String processId, String taskId, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = findInputOutputsCall(processId, taskId, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<InputOutputCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for retrieving all existing InputOutput objects for the related task instance.
     * @param processId Process ID related to InputOutput object (required)
     * @param taskId Task instance ID related to InputOutput object (required)
     * @param page Page Nr to fetch (optional, default to 1)
     * @param perPage Amount of Items per Page (optional, default to 15)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findInputOutputsAsync(String processId, String taskId, Integer page, Integer perPage, final ApiCallback<InputOutputCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findInputOutputsCall(processId, taskId, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InputOutputCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findInstanceById */
    private com.squareup.okhttp.Call findInstanceByIdCall(String processId, String instanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling findInstanceById(Async)");
        }
        
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling findInstanceById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/instances/{instance_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "instance_id" + "\\}", apiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is responsible for retrieving an instance based on itâ€™s ID.
     * @param processId ID of Process to fetch (required)
     * @param instanceId ID of Instance to fetch (required)
     * @return InstanceItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InstanceItem findInstanceById(String processId, String instanceId) throws ApiException {
        ApiResponse<InstanceItem> resp = findInstanceByIdWithHttpInfo(processId, instanceId);
        return resp.getData();
    }

    /**
     * 
     * This method is responsible for retrieving an instance based on itâ€™s ID.
     * @param processId ID of Process to fetch (required)
     * @param instanceId ID of Instance to fetch (required)
     * @return ApiResponse&lt;InstanceItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InstanceItem> findInstanceByIdWithHttpInfo(String processId, String instanceId) throws ApiException {
        com.squareup.okhttp.Call call = findInstanceByIdCall(processId, instanceId, null, null);
        Type localVarReturnType = new TypeToken<InstanceItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is responsible for retrieving an instance based on itâ€™s ID.
     * @param processId ID of Process to fetch (required)
     * @param instanceId ID of Instance to fetch (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findInstanceByIdAsync(String processId, String instanceId, final ApiCallback<InstanceItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findInstanceByIdCall(processId, instanceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InstanceItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findInstances */
    private com.squareup.okhttp.Call findInstancesCall(String processId, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling findInstances(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/instances".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is responsible for retrieving all Instances related to the Process via Process ID
     * @param processId Process ID relative to instance (required)
     * @param page Page Nr to fetch (optional, default to 1)
     * @param perPage Amount of Items per Page (optional, default to 15)
     * @return InstanceCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InstanceCollection findInstances(String processId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<InstanceCollection> resp = findInstancesWithHttpInfo(processId, page, perPage);
        return resp.getData();
    }

    /**
     * 
     * This method is responsible for retrieving all Instances related to the Process via Process ID
     * @param processId Process ID relative to instance (required)
     * @param page Page Nr to fetch (optional, default to 1)
     * @param perPage Amount of Items per Page (optional, default to 15)
     * @return ApiResponse&lt;InstanceCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InstanceCollection> findInstancesWithHttpInfo(String processId, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = findInstancesCall(processId, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<InstanceCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is responsible for retrieving all Instances related to the Process via Process ID
     * @param processId Process ID relative to instance (required)
     * @param page Page Nr to fetch (optional, default to 1)
     * @param perPage Amount of Items per Page (optional, default to 15)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findInstancesAsync(String processId, Integer page, Integer perPage, final ApiCallback<InstanceCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findInstancesCall(processId, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InstanceCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findProcessById */
    private com.squareup.okhttp.Call findProcessByIdCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling findProcessById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Returns the process based on a single ID
     * @param id ID of Process to fetch (required)
     * @return ProcessItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProcessItem findProcessById(String id) throws ApiException {
        ApiResponse<ProcessItem> resp = findProcessByIdWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * 
     * Returns the process based on a single ID
     * @param id ID of Process to fetch (required)
     * @return ApiResponse&lt;ProcessItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProcessItem> findProcessByIdWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = findProcessByIdCall(id, null, null);
        Type localVarReturnType = new TypeToken<ProcessItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the process based on a single ID
     * @param id ID of Process to fetch (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findProcessByIdAsync(String id, final ApiCallback<ProcessItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findProcessByIdCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProcessItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findProcesses */
    private com.squareup.okhttp.Call findProcessesCall(Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/processes".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is responsible for retrieving all existing processes.
     * @param page Page Nr to fetch (optional, default to 1)
     * @param perPage Amount of Items per Page (optional, default to 15)
     * @return ProcessCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProcessCollection findProcesses(Integer page, Integer perPage) throws ApiException {
        ApiResponse<ProcessCollection> resp = findProcessesWithHttpInfo(page, perPage);
        return resp.getData();
    }

    /**
     * 
     * This method is responsible for retrieving all existing processes.
     * @param page Page Nr to fetch (optional, default to 1)
     * @param perPage Amount of Items per Page (optional, default to 15)
     * @return ApiResponse&lt;ProcessCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProcessCollection> findProcessesWithHttpInfo(Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = findProcessesCall(page, perPage, null, null);
        Type localVarReturnType = new TypeToken<ProcessCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is responsible for retrieving all existing processes.
     * @param page Page Nr to fetch (optional, default to 1)
     * @param perPage Amount of Items per Page (optional, default to 15)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findProcessesAsync(Integer page, Integer perPage, final ApiCallback<ProcessCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findProcessesCall(page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProcessCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findTaskById */
    private com.squareup.okhttp.Call findTaskByIdCall(String processId, String taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling findTaskById(Async)");
        }
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling findTaskById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/tasks/{task_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is responsible for retrieving a task based on itâ€™s ID.
     * @param processId ID of Process to fetch (required)
     * @param taskId ID of Task to fetch (required)
     * @return TaskItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskItem findTaskById(String processId, String taskId) throws ApiException {
        ApiResponse<TaskItem> resp = findTaskByIdWithHttpInfo(processId, taskId);
        return resp.getData();
    }

    /**
     * 
     * This method is responsible for retrieving a task based on itâ€™s ID.
     * @param processId ID of Process to fetch (required)
     * @param taskId ID of Task to fetch (required)
     * @return ApiResponse&lt;TaskItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskItem> findTaskByIdWithHttpInfo(String processId, String taskId) throws ApiException {
        com.squareup.okhttp.Call call = findTaskByIdCall(processId, taskId, null, null);
        Type localVarReturnType = new TypeToken<TaskItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is responsible for retrieving a task based on itâ€™s ID.
     * @param processId ID of Process to fetch (required)
     * @param taskId ID of Task to fetch (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findTaskByIdAsync(String processId, String taskId, final ApiCallback<TaskItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findTaskByIdCall(processId, taskId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findTaskInstanceById */
    private com.squareup.okhttp.Call findTaskInstanceByIdCall(String taskInstanceId, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'taskInstanceId' is set
        if (taskInstanceId == null) {
            throw new ApiException("Missing the required parameter 'taskInstanceId' when calling findTaskInstanceById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/task_instances/{task_instance_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "task_instance_id" + "\\}", apiClient.escapeString(taskInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is responsible for retrieving TaskInstance based on itâ€™s ID.
     * @param taskInstanceId ID of TaskInstance to fetch (required)
     * @param page Page Nr to fetch (optional, default to 1)
     * @param perPage Amount of Items per Page (optional, default to 15)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 findTaskInstanceById(String taskInstanceId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<InlineResponse200> resp = findTaskInstanceByIdWithHttpInfo(taskInstanceId, page, perPage);
        return resp.getData();
    }

    /**
     * 
     * This method is responsible for retrieving TaskInstance based on itâ€™s ID.
     * @param taskInstanceId ID of TaskInstance to fetch (required)
     * @param page Page Nr to fetch (optional, default to 1)
     * @param perPage Amount of Items per Page (optional, default to 15)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> findTaskInstanceByIdWithHttpInfo(String taskInstanceId, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = findTaskInstanceByIdCall(taskInstanceId, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is responsible for retrieving TaskInstance based on itâ€™s ID.
     * @param taskInstanceId ID of TaskInstance to fetch (required)
     * @param page Page Nr to fetch (optional, default to 1)
     * @param perPage Amount of Items per Page (optional, default to 15)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findTaskInstanceByIdAsync(String taskInstanceId, Integer page, Integer perPage, final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findTaskInstanceByIdCall(taskInstanceId, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findTaskInstances */
    private com.squareup.okhttp.Call findTaskInstancesCall(Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/task_instances".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is responsible for retrieving and finding tasks instances  related to the task
     * @param page Page Nr to fetch (optional, default to 1)
     * @param perPage Amount of Items per Page (optional, default to 15)
     * @return TaskInstanceCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskInstanceCollection findTaskInstances(Integer page, Integer perPage) throws ApiException {
        ApiResponse<TaskInstanceCollection> resp = findTaskInstancesWithHttpInfo(page, perPage);
        return resp.getData();
    }

    /**
     * 
     * This method is responsible for retrieving and finding tasks instances  related to the task
     * @param page Page Nr to fetch (optional, default to 1)
     * @param perPage Amount of Items per Page (optional, default to 15)
     * @return ApiResponse&lt;TaskInstanceCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskInstanceCollection> findTaskInstancesWithHttpInfo(Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = findTaskInstancesCall(page, perPage, null, null);
        Type localVarReturnType = new TypeToken<TaskInstanceCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is responsible for retrieving and finding tasks instances  related to the task
     * @param page Page Nr to fetch (optional, default to 1)
     * @param perPage Amount of Items per Page (optional, default to 15)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findTaskInstancesAsync(Integer page, Integer perPage, final ApiCallback<TaskInstanceCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findTaskInstancesCall(page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskInstanceCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findTasks */
    private com.squareup.okhttp.Call findTasksCall(String processId, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling findTasks(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/tasks".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for returning a list of all Tasks related to the process
     * @param processId ID of Process relative to task (required)
     * @param page Page Nr to fetch (optional, default to 1)
     * @param perPage Amount of Items per Page (optional, default to 15)
     * @return TaskCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskCollection findTasks(String processId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<TaskCollection> resp = findTasksWithHttpInfo(processId, page, perPage);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for returning a list of all Tasks related to the process
     * @param processId ID of Process relative to task (required)
     * @param page Page Nr to fetch (optional, default to 1)
     * @param perPage Amount of Items per Page (optional, default to 15)
     * @return ApiResponse&lt;TaskCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskCollection> findTasksWithHttpInfo(String processId, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = findTasksCall(processId, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<TaskCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for returning a list of all Tasks related to the process
     * @param processId ID of Process relative to task (required)
     * @param page Page Nr to fetch (optional, default to 1)
     * @param perPage Amount of Items per Page (optional, default to 15)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findTasksAsync(String processId, Integer page, Integer perPage, final ApiCallback<TaskCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findTasksCall(processId, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findUserById */
    private com.squareup.okhttp.Call findUserByIdCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling findUserById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/users/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is responsible for returning a user based on their ID.
     * @param id ID of User to fetch (required)
     * @return UserItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserItem findUserById(String id) throws ApiException {
        ApiResponse<UserItem> resp = findUserByIdWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * 
     * This method is responsible for returning a user based on their ID.
     * @param id ID of User to fetch (required)
     * @return ApiResponse&lt;UserItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserItem> findUserByIdWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = findUserByIdCall(id, null, null);
        Type localVarReturnType = new TypeToken<UserItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is responsible for returning a user based on their ID.
     * @param id ID of User to fetch (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findUserByIdAsync(String id, final ApiCallback<UserItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findUserByIdCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for findUsers */
    private com.squareup.okhttp.Call findUsersCall(Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/users".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for returning all existing users in the system.
     * @param page Page Nr to fetch (optional, default to 1)
     * @param perPage Amount of Items per Page (optional, default to 15)
     * @return UserCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserCollection findUsers(Integer page, Integer perPage) throws ApiException {
        ApiResponse<UserCollection> resp = findUsersWithHttpInfo(page, perPage);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for returning all existing users in the system.
     * @param page Page Nr to fetch (optional, default to 1)
     * @param perPage Amount of Items per Page (optional, default to 15)
     * @return ApiResponse&lt;UserCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserCollection> findUsersWithHttpInfo(Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = findUsersCall(page, perPage, null, null);
        Type localVarReturnType = new TypeToken<UserCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for returning all existing users in the system.
     * @param page Page Nr to fetch (optional, default to 1)
     * @param perPage Amount of Items per Page (optional, default to 15)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findUsersAsync(Integer page, Integer perPage, final ApiCallback<UserCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findUsersCall(page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for importBpmnFile */
    private com.squareup.okhttp.Call importBpmnFileCall(BpmnImportItem bpmnImportItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = bpmnImportItem;
        
        // verify the required parameter 'bpmnImportItem' is set
        if (bpmnImportItem == null) {
            throw new ApiException("Missing the required parameter 'bpmnImportItem' when calling importBpmnFile(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/import".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for importing BPMN files. This import covers next BPMN 2.0 elements for modeling processes: Sequence Flows, Start event, End event, Message Start event, Message Intermediate event, Timer Boundary Interrupting Event, Timer Boundary Non-Interrupting Event, Script task, User task, Service task Exclusive Gateways, Inclusive Gateways, Parallel Gateways. A new process is created when import passed successful.
     * @param bpmnImportItem JsonApi with the BPMN file to import (required)
     * @return ProcessCollection1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProcessCollection1 importBpmnFile(BpmnImportItem bpmnImportItem) throws ApiException {
        ApiResponse<ProcessCollection1> resp = importBpmnFileWithHttpInfo(bpmnImportItem);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for importing BPMN files. This import covers next BPMN 2.0 elements for modeling processes: Sequence Flows, Start event, End event, Message Start event, Message Intermediate event, Timer Boundary Interrupting Event, Timer Boundary Non-Interrupting Event, Script task, User task, Service task Exclusive Gateways, Inclusive Gateways, Parallel Gateways. A new process is created when import passed successful.
     * @param bpmnImportItem JsonApi with the BPMN file to import (required)
     * @return ApiResponse&lt;ProcessCollection1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProcessCollection1> importBpmnFileWithHttpInfo(BpmnImportItem bpmnImportItem) throws ApiException {
        com.squareup.okhttp.Call call = importBpmnFileCall(bpmnImportItem, null, null);
        Type localVarReturnType = new TypeToken<ProcessCollection1>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for importing BPMN files. This import covers next BPMN 2.0 elements for modeling processes: Sequence Flows, Start event, End event, Message Start event, Message Intermediate event, Timer Boundary Interrupting Event, Timer Boundary Non-Interrupting Event, Script task, User task, Service task Exclusive Gateways, Inclusive Gateways, Parallel Gateways. A new process is created when import passed successful.
     * @param bpmnImportItem JsonApi with the BPMN file to import (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importBpmnFileAsync(BpmnImportItem bpmnImportItem, final ApiCallback<ProcessCollection1> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importBpmnFileCall(bpmnImportItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProcessCollection1>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for myselfUser */
    private com.squareup.okhttp.Call myselfUserCall(Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/users/myself".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method returns User information based on Token
     * @param page Page Nr to fetch (optional, default to 1)
     * @param perPage Amount of Items per Page (optional, default to 15)
     * @return UserItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserItem myselfUser(Integer page, Integer perPage) throws ApiException {
        ApiResponse<UserItem> resp = myselfUserWithHttpInfo(page, perPage);
        return resp.getData();
    }

    /**
     * 
     * This method returns User information based on Token
     * @param page Page Nr to fetch (optional, default to 1)
     * @param perPage Amount of Items per Page (optional, default to 15)
     * @return ApiResponse&lt;UserItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserItem> myselfUserWithHttpInfo(Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = myselfUserCall(page, perPage, null, null);
        Type localVarReturnType = new TypeToken<UserItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method returns User information based on Token
     * @param page Page Nr to fetch (optional, default to 1)
     * @param perPage Amount of Items per Page (optional, default to 15)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call myselfUserAsync(Integer page, Integer perPage, final ApiCallback<UserItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = myselfUserCall(page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for removeGroupsFromTask */
    private com.squareup.okhttp.Call removeGroupsFromTaskCall(String processId, String taskId, TaskRemoveGroupsItem taskRemoveGroupsItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taskRemoveGroupsItem;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling removeGroupsFromTask(Async)");
        }
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling removeGroupsFromTask(Async)");
        }
        
        // verify the required parameter 'taskRemoveGroupsItem' is set
        if (taskRemoveGroupsItem == null) {
            throw new ApiException("Missing the required parameter 'taskRemoveGroupsItem' when calling removeGroupsFromTask(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/tasks/{task_id}/groups".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for removing groups from a task
     * @param processId ID of Process (required)
     * @param taskId ID of Task (required)
     * @param taskRemoveGroupsItem JsonApi with Groups ids to remove (required)
     * @return ResultSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultSuccess removeGroupsFromTask(String processId, String taskId, TaskRemoveGroupsItem taskRemoveGroupsItem) throws ApiException {
        ApiResponse<ResultSuccess> resp = removeGroupsFromTaskWithHttpInfo(processId, taskId, taskRemoveGroupsItem);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for removing groups from a task
     * @param processId ID of Process (required)
     * @param taskId ID of Task (required)
     * @param taskRemoveGroupsItem JsonApi with Groups ids to remove (required)
     * @return ApiResponse&lt;ResultSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultSuccess> removeGroupsFromTaskWithHttpInfo(String processId, String taskId, TaskRemoveGroupsItem taskRemoveGroupsItem) throws ApiException {
        com.squareup.okhttp.Call call = removeGroupsFromTaskCall(processId, taskId, taskRemoveGroupsItem, null, null);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for removing groups from a task
     * @param processId ID of Process (required)
     * @param taskId ID of Task (required)
     * @param taskRemoveGroupsItem JsonApi with Groups ids to remove (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeGroupsFromTaskAsync(String processId, String taskId, TaskRemoveGroupsItem taskRemoveGroupsItem, final ApiCallback<ResultSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeGroupsFromTaskCall(processId, taskId, taskRemoveGroupsItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for removeUsersFromGroup */
    private com.squareup.okhttp.Call removeUsersFromGroupCall(String id, GroupRemoveUsersItem groupRemoveUsersItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = groupRemoveUsersItem;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeUsersFromGroup(Async)");
        }
        
        // verify the required parameter 'groupRemoveUsersItem' is set
        if (groupRemoveUsersItem == null) {
            throw new ApiException("Missing the required parameter 'groupRemoveUsersItem' when calling removeUsersFromGroup(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/groups/{id}/users".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for removing one or more users from a group.
     * @param id ID of Group to modify (required)
     * @param groupRemoveUsersItem JsonApi with Users ids to remove (required)
     * @return ResultSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultSuccess removeUsersFromGroup(String id, GroupRemoveUsersItem groupRemoveUsersItem) throws ApiException {
        ApiResponse<ResultSuccess> resp = removeUsersFromGroupWithHttpInfo(id, groupRemoveUsersItem);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for removing one or more users from a group.
     * @param id ID of Group to modify (required)
     * @param groupRemoveUsersItem JsonApi with Users ids to remove (required)
     * @return ApiResponse&lt;ResultSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultSuccess> removeUsersFromGroupWithHttpInfo(String id, GroupRemoveUsersItem groupRemoveUsersItem) throws ApiException {
        com.squareup.okhttp.Call call = removeUsersFromGroupCall(id, groupRemoveUsersItem, null, null);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for removing one or more users from a group.
     * @param id ID of Group to modify (required)
     * @param groupRemoveUsersItem JsonApi with Users ids to remove (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeUsersFromGroupAsync(String id, GroupRemoveUsersItem groupRemoveUsersItem, final ApiCallback<ResultSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeUsersFromGroupCall(id, groupRemoveUsersItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for syncGroupsToTask */
    private com.squareup.okhttp.Call syncGroupsToTaskCall(String processId, String taskId, TaskSyncGroupsItem taskSyncGroupsItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taskSyncGroupsItem;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling syncGroupsToTask(Async)");
        }
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling syncGroupsToTask(Async)");
        }
        
        // verify the required parameter 'taskSyncGroupsItem' is set
        if (taskSyncGroupsItem == null) {
            throw new ApiException("Missing the required parameter 'taskSyncGroupsItem' when calling syncGroupsToTask(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/tasks/{task_id}/groups".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for synchronizing a one or more groups with a task.
     * @param processId ID of Process (required)
     * @param taskId ID of Task to modify (required)
     * @param taskSyncGroupsItem JsonApi with Groups ids to sync (required)
     * @return ResultSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultSuccess syncGroupsToTask(String processId, String taskId, TaskSyncGroupsItem taskSyncGroupsItem) throws ApiException {
        ApiResponse<ResultSuccess> resp = syncGroupsToTaskWithHttpInfo(processId, taskId, taskSyncGroupsItem);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for synchronizing a one or more groups with a task.
     * @param processId ID of Process (required)
     * @param taskId ID of Task to modify (required)
     * @param taskSyncGroupsItem JsonApi with Groups ids to sync (required)
     * @return ApiResponse&lt;ResultSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultSuccess> syncGroupsToTaskWithHttpInfo(String processId, String taskId, TaskSyncGroupsItem taskSyncGroupsItem) throws ApiException {
        com.squareup.okhttp.Call call = syncGroupsToTaskCall(processId, taskId, taskSyncGroupsItem, null, null);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for synchronizing a one or more groups with a task.
     * @param processId ID of Process (required)
     * @param taskId ID of Task to modify (required)
     * @param taskSyncGroupsItem JsonApi with Groups ids to sync (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call syncGroupsToTaskAsync(String processId, String taskId, TaskSyncGroupsItem taskSyncGroupsItem, final ApiCallback<ResultSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = syncGroupsToTaskCall(processId, taskId, taskSyncGroupsItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for syncUsersToGroup */
    private com.squareup.okhttp.Call syncUsersToGroupCall(String id, GroupSyncUsersItem groupSyncUsersItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = groupSyncUsersItem;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling syncUsersToGroup(Async)");
        }
        
        // verify the required parameter 'groupSyncUsersItem' is set
        if (groupSyncUsersItem == null) {
            throw new ApiException("Missing the required parameter 'groupSyncUsersItem' when calling syncUsersToGroup(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/groups/{id}/users".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for synchronizing one or more users with a group.
     * @param id ID of Group to modify (required)
     * @param groupSyncUsersItem JsonApi with Users ids to sync (required)
     * @return ResultSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultSuccess syncUsersToGroup(String id, GroupSyncUsersItem groupSyncUsersItem) throws ApiException {
        ApiResponse<ResultSuccess> resp = syncUsersToGroupWithHttpInfo(id, groupSyncUsersItem);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for synchronizing one or more users with a group.
     * @param id ID of Group to modify (required)
     * @param groupSyncUsersItem JsonApi with Users ids to sync (required)
     * @return ApiResponse&lt;ResultSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultSuccess> syncUsersToGroupWithHttpInfo(String id, GroupSyncUsersItem groupSyncUsersItem) throws ApiException {
        com.squareup.okhttp.Call call = syncUsersToGroupCall(id, groupSyncUsersItem, null, null);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for synchronizing one or more users with a group.
     * @param id ID of Group to modify (required)
     * @param groupSyncUsersItem JsonApi with Users ids to sync (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call syncUsersToGroupAsync(String id, GroupSyncUsersItem groupSyncUsersItem, final ApiCallback<ResultSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = syncUsersToGroupCall(id, groupSyncUsersItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateClient */
    private com.squareup.okhttp.Call updateClientCall(String userId, String clientId, ClientUpdateItem clientUpdateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = clientUpdateItem;
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateClient(Async)");
        }
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling updateClient(Async)");
        }
        
        // verify the required parameter 'clientUpdateItem' is set
        if (clientUpdateItem == null) {
            throw new ApiException("Missing the required parameter 'clientUpdateItem' when calling updateClient(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/users/{user_id}/clients/{client_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()))
        .replaceAll("\\{" + "client_id" + "\\}", apiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for updating an existing client.
     * @param userId ID of User to fetch (required)
     * @param clientId ID of Client to fetch (required)
     * @param clientUpdateItem Client object to edit (required)
     * @return ClientItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClientItem updateClient(String userId, String clientId, ClientUpdateItem clientUpdateItem) throws ApiException {
        ApiResponse<ClientItem> resp = updateClientWithHttpInfo(userId, clientId, clientUpdateItem);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for updating an existing client.
     * @param userId ID of User to fetch (required)
     * @param clientId ID of Client to fetch (required)
     * @param clientUpdateItem Client object to edit (required)
     * @return ApiResponse&lt;ClientItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClientItem> updateClientWithHttpInfo(String userId, String clientId, ClientUpdateItem clientUpdateItem) throws ApiException {
        com.squareup.okhttp.Call call = updateClientCall(userId, clientId, clientUpdateItem, null, null);
        Type localVarReturnType = new TypeToken<ClientItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for updating an existing client.
     * @param userId ID of User to fetch (required)
     * @param clientId ID of Client to fetch (required)
     * @param clientUpdateItem Client object to edit (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateClientAsync(String userId, String clientId, ClientUpdateItem clientUpdateItem, final ApiCallback<ClientItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateClientCall(userId, clientId, clientUpdateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClientItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateEvent */
    private com.squareup.okhttp.Call updateEventCall(String processId, String eventId, EventUpdateItem eventUpdateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = eventUpdateItem;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling updateEvent(Async)");
        }
        
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling updateEvent(Async)");
        }
        
        // verify the required parameter 'eventUpdateItem' is set
        if (eventUpdateItem == null) {
            throw new ApiException("Missing the required parameter 'eventUpdateItem' when calling updateEvent(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/events/{event_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "event_id" + "\\}", apiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method lets update the existing Process Event with new  data
     * @param processId ID of Process to fetch (required)
     * @param eventId ID of Event to fetch (required)
     * @param eventUpdateItem Event object to edit (required)
     * @return EventItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventItem updateEvent(String processId, String eventId, EventUpdateItem eventUpdateItem) throws ApiException {
        ApiResponse<EventItem> resp = updateEventWithHttpInfo(processId, eventId, eventUpdateItem);
        return resp.getData();
    }

    /**
     * 
     * This method lets update the existing Process Event with new  data
     * @param processId ID of Process to fetch (required)
     * @param eventId ID of Event to fetch (required)
     * @param eventUpdateItem Event object to edit (required)
     * @return ApiResponse&lt;EventItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventItem> updateEventWithHttpInfo(String processId, String eventId, EventUpdateItem eventUpdateItem) throws ApiException {
        com.squareup.okhttp.Call call = updateEventCall(processId, eventId, eventUpdateItem, null, null);
        Type localVarReturnType = new TypeToken<EventItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method lets update the existing Process Event with new  data
     * @param processId ID of Process to fetch (required)
     * @param eventId ID of Event to fetch (required)
     * @param eventUpdateItem Event object to edit (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateEventAsync(String processId, String eventId, EventUpdateItem eventUpdateItem, final ApiCallback<EventItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateEventCall(processId, eventId, eventUpdateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateFlow */
    private com.squareup.okhttp.Call updateFlowCall(String processId, String flowId, FlowUpdateItem flowUpdateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = flowUpdateItem;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling updateFlow(Async)");
        }
        
        // verify the required parameter 'flowId' is set
        if (flowId == null) {
            throw new ApiException("Missing the required parameter 'flowId' when calling updateFlow(Async)");
        }
        
        // verify the required parameter 'flowUpdateItem' is set
        if (flowUpdateItem == null) {
            throw new ApiException("Missing the required parameter 'flowUpdateItem' when calling updateFlow(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/flows/{flow_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "flow_id" + "\\}", apiClient.escapeString(flowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for updating an existing flow.
     * @param processId ID of Process to fetch (required)
     * @param flowId ID of Flow to fetch (required)
     * @param flowUpdateItem Flow object to edit (required)
     * @return FlowItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FlowItem updateFlow(String processId, String flowId, FlowUpdateItem flowUpdateItem) throws ApiException {
        ApiResponse<FlowItem> resp = updateFlowWithHttpInfo(processId, flowId, flowUpdateItem);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for updating an existing flow.
     * @param processId ID of Process to fetch (required)
     * @param flowId ID of Flow to fetch (required)
     * @param flowUpdateItem Flow object to edit (required)
     * @return ApiResponse&lt;FlowItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FlowItem> updateFlowWithHttpInfo(String processId, String flowId, FlowUpdateItem flowUpdateItem) throws ApiException {
        com.squareup.okhttp.Call call = updateFlowCall(processId, flowId, flowUpdateItem, null, null);
        Type localVarReturnType = new TypeToken<FlowItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for updating an existing flow.
     * @param processId ID of Process to fetch (required)
     * @param flowId ID of Flow to fetch (required)
     * @param flowUpdateItem Flow object to edit (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateFlowAsync(String processId, String flowId, FlowUpdateItem flowUpdateItem, final ApiCallback<FlowItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateFlowCall(processId, flowId, flowUpdateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FlowItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateGateway */
    private com.squareup.okhttp.Call updateGatewayCall(String processId, String gatewayId, GatewayUpdateItem gatewayUpdateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = gatewayUpdateItem;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling updateGateway(Async)");
        }
        
        // verify the required parameter 'gatewayId' is set
        if (gatewayId == null) {
            throw new ApiException("Missing the required parameter 'gatewayId' when calling updateGateway(Async)");
        }
        
        // verify the required parameter 'gatewayUpdateItem' is set
        if (gatewayUpdateItem == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateItem' when calling updateGateway(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/gateways/{gateway_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "gateway_id" + "\\}", apiClient.escapeString(gatewayId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for updating an existing gateway.
     * @param processId ID of Process to fetch (required)
     * @param gatewayId ID of Gateway to fetch (required)
     * @param gatewayUpdateItem Gateway object to edit (required)
     * @return GatewayItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GatewayItem updateGateway(String processId, String gatewayId, GatewayUpdateItem gatewayUpdateItem) throws ApiException {
        ApiResponse<GatewayItem> resp = updateGatewayWithHttpInfo(processId, gatewayId, gatewayUpdateItem);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for updating an existing gateway.
     * @param processId ID of Process to fetch (required)
     * @param gatewayId ID of Gateway to fetch (required)
     * @param gatewayUpdateItem Gateway object to edit (required)
     * @return ApiResponse&lt;GatewayItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GatewayItem> updateGatewayWithHttpInfo(String processId, String gatewayId, GatewayUpdateItem gatewayUpdateItem) throws ApiException {
        com.squareup.okhttp.Call call = updateGatewayCall(processId, gatewayId, gatewayUpdateItem, null, null);
        Type localVarReturnType = new TypeToken<GatewayItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for updating an existing gateway.
     * @param processId ID of Process to fetch (required)
     * @param gatewayId ID of Gateway to fetch (required)
     * @param gatewayUpdateItem Gateway object to edit (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateGatewayAsync(String processId, String gatewayId, GatewayUpdateItem gatewayUpdateItem, final ApiCallback<GatewayItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateGatewayCall(processId, gatewayId, gatewayUpdateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GatewayItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateGroup */
    private com.squareup.okhttp.Call updateGroupCall(String id, GroupUpdateItem groupUpdateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = groupUpdateItem;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateGroup(Async)");
        }
        
        // verify the required parameter 'groupUpdateItem' is set
        if (groupUpdateItem == null) {
            throw new ApiException("Missing the required parameter 'groupUpdateItem' when calling updateGroup(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/groups/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for updating an existing group.
     * @param id ID of Group to fetch (required)
     * @param groupUpdateItem Group object to edit (required)
     * @return GroupItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GroupItem updateGroup(String id, GroupUpdateItem groupUpdateItem) throws ApiException {
        ApiResponse<GroupItem> resp = updateGroupWithHttpInfo(id, groupUpdateItem);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for updating an existing group.
     * @param id ID of Group to fetch (required)
     * @param groupUpdateItem Group object to edit (required)
     * @return ApiResponse&lt;GroupItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GroupItem> updateGroupWithHttpInfo(String id, GroupUpdateItem groupUpdateItem) throws ApiException {
        com.squareup.okhttp.Call call = updateGroupCall(id, groupUpdateItem, null, null);
        Type localVarReturnType = new TypeToken<GroupItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for updating an existing group.
     * @param id ID of Group to fetch (required)
     * @param groupUpdateItem Group object to edit (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateGroupAsync(String id, GroupUpdateItem groupUpdateItem, final ApiCallback<GroupItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateGroupCall(id, groupUpdateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GroupItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateInputOutput */
    private com.squareup.okhttp.Call updateInputOutputCall(String processId, String taskId, String inputoutputUid, InputOutputUpdateItem inputOutputUpdateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = inputOutputUpdateItem;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling updateInputOutput(Async)");
        }
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling updateInputOutput(Async)");
        }
        
        // verify the required parameter 'inputoutputUid' is set
        if (inputoutputUid == null) {
            throw new ApiException("Missing the required parameter 'inputoutputUid' when calling updateInputOutput(Async)");
        }
        
        // verify the required parameter 'inputOutputUpdateItem' is set
        if (inputOutputUpdateItem == null) {
            throw new ApiException("Missing the required parameter 'inputOutputUpdateItem' when calling updateInputOutput(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/tasks/{task_id}/inputoutput/{inputoutput_uid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()))
        .replaceAll("\\{" + "inputoutput_uid" + "\\}", apiClient.escapeString(inputoutputUid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for updating an existing InputOutput.
     * @param processId Process ID related to InputOutput object (required)
     * @param taskId Task instance ID related to InputOutput object (required)
     * @param inputoutputUid ID of InputOutput to fetch (required)
     * @param inputOutputUpdateItem InputOutput object to edit (required)
     * @return InputOutputItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InputOutputItem updateInputOutput(String processId, String taskId, String inputoutputUid, InputOutputUpdateItem inputOutputUpdateItem) throws ApiException {
        ApiResponse<InputOutputItem> resp = updateInputOutputWithHttpInfo(processId, taskId, inputoutputUid, inputOutputUpdateItem);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for updating an existing InputOutput.
     * @param processId Process ID related to InputOutput object (required)
     * @param taskId Task instance ID related to InputOutput object (required)
     * @param inputoutputUid ID of InputOutput to fetch (required)
     * @param inputOutputUpdateItem InputOutput object to edit (required)
     * @return ApiResponse&lt;InputOutputItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InputOutputItem> updateInputOutputWithHttpInfo(String processId, String taskId, String inputoutputUid, InputOutputUpdateItem inputOutputUpdateItem) throws ApiException {
        com.squareup.okhttp.Call call = updateInputOutputCall(processId, taskId, inputoutputUid, inputOutputUpdateItem, null, null);
        Type localVarReturnType = new TypeToken<InputOutputItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for updating an existing InputOutput.
     * @param processId Process ID related to InputOutput object (required)
     * @param taskId Task instance ID related to InputOutput object (required)
     * @param inputoutputUid ID of InputOutput to fetch (required)
     * @param inputOutputUpdateItem InputOutput object to edit (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateInputOutputAsync(String processId, String taskId, String inputoutputUid, InputOutputUpdateItem inputOutputUpdateItem, final ApiCallback<InputOutputItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateInputOutputCall(processId, taskId, inputoutputUid, inputOutputUpdateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InputOutputItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateInstance */
    private com.squareup.okhttp.Call updateInstanceCall(String processId, String instanceId, InstanceUpdateItem instanceUpdateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = instanceUpdateItem;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling updateInstance(Async)");
        }
        
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling updateInstance(Async)");
        }
        
        // verify the required parameter 'instanceUpdateItem' is set
        if (instanceUpdateItem == null) {
            throw new ApiException("Missing the required parameter 'instanceUpdateItem' when calling updateInstance(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/instances/{instance_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "instance_id" + "\\}", apiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for updating an existing Instance.
     * @param processId ID of Process to fetch (required)
     * @param instanceId ID of Instance to fetch (required)
     * @param instanceUpdateItem Instance object to edit (required)
     * @return InstanceItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InstanceItem updateInstance(String processId, String instanceId, InstanceUpdateItem instanceUpdateItem) throws ApiException {
        ApiResponse<InstanceItem> resp = updateInstanceWithHttpInfo(processId, instanceId, instanceUpdateItem);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for updating an existing Instance.
     * @param processId ID of Process to fetch (required)
     * @param instanceId ID of Instance to fetch (required)
     * @param instanceUpdateItem Instance object to edit (required)
     * @return ApiResponse&lt;InstanceItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InstanceItem> updateInstanceWithHttpInfo(String processId, String instanceId, InstanceUpdateItem instanceUpdateItem) throws ApiException {
        com.squareup.okhttp.Call call = updateInstanceCall(processId, instanceId, instanceUpdateItem, null, null);
        Type localVarReturnType = new TypeToken<InstanceItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for updating an existing Instance.
     * @param processId ID of Process to fetch (required)
     * @param instanceId ID of Instance to fetch (required)
     * @param instanceUpdateItem Instance object to edit (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateInstanceAsync(String processId, String instanceId, InstanceUpdateItem instanceUpdateItem, final ApiCallback<InstanceItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateInstanceCall(processId, instanceId, instanceUpdateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InstanceItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateProcess */
    private com.squareup.okhttp.Call updateProcessCall(String id, ProcessUpdateItem processUpdateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = processUpdateItem;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateProcess(Async)");
        }
        
        // verify the required parameter 'processUpdateItem' is set
        if (processUpdateItem == null) {
            throw new ApiException("Missing the required parameter 'processUpdateItem' when calling updateProcess(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for updating an existing process.
     * @param id ID of Process to fetch (required)
     * @param processUpdateItem Process object to edit (required)
     * @return ProcessItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProcessItem updateProcess(String id, ProcessUpdateItem processUpdateItem) throws ApiException {
        ApiResponse<ProcessItem> resp = updateProcessWithHttpInfo(id, processUpdateItem);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for updating an existing process.
     * @param id ID of Process to fetch (required)
     * @param processUpdateItem Process object to edit (required)
     * @return ApiResponse&lt;ProcessItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProcessItem> updateProcessWithHttpInfo(String id, ProcessUpdateItem processUpdateItem) throws ApiException {
        com.squareup.okhttp.Call call = updateProcessCall(id, processUpdateItem, null, null);
        Type localVarReturnType = new TypeToken<ProcessItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for updating an existing process.
     * @param id ID of Process to fetch (required)
     * @param processUpdateItem Process object to edit (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateProcessAsync(String id, ProcessUpdateItem processUpdateItem, final ApiCallback<ProcessItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateProcessCall(id, processUpdateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProcessItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateTask */
    private com.squareup.okhttp.Call updateTaskCall(String processId, String taskId, TaskUpdateItem taskUpdateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taskUpdateItem;
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling updateTask(Async)");
        }
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling updateTask(Async)");
        }
        
        // verify the required parameter 'taskUpdateItem' is set
        if (taskUpdateItem == null) {
            throw new ApiException("Missing the required parameter 'taskUpdateItem' when calling updateTask(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/processes/{process_id}/tasks/{task_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "process_id" + "\\}", apiClient.escapeString(processId.toString()))
        .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for updating an existing task.
     * @param processId ID of Process to fetch (required)
     * @param taskId ID of Task to fetch (required)
     * @param taskUpdateItem Task object to edit (required)
     * @return TaskItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskItem updateTask(String processId, String taskId, TaskUpdateItem taskUpdateItem) throws ApiException {
        ApiResponse<TaskItem> resp = updateTaskWithHttpInfo(processId, taskId, taskUpdateItem);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for updating an existing task.
     * @param processId ID of Process to fetch (required)
     * @param taskId ID of Task to fetch (required)
     * @param taskUpdateItem Task object to edit (required)
     * @return ApiResponse&lt;TaskItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskItem> updateTaskWithHttpInfo(String processId, String taskId, TaskUpdateItem taskUpdateItem) throws ApiException {
        com.squareup.okhttp.Call call = updateTaskCall(processId, taskId, taskUpdateItem, null, null);
        Type localVarReturnType = new TypeToken<TaskItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for updating an existing task.
     * @param processId ID of Process to fetch (required)
     * @param taskId ID of Task to fetch (required)
     * @param taskUpdateItem Task object to edit (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTaskAsync(String processId, String taskId, TaskUpdateItem taskUpdateItem, final ApiCallback<TaskItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTaskCall(processId, taskId, taskUpdateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateTaskInstance */
    private com.squareup.okhttp.Call updateTaskInstanceCall(String taskInstanceId, TaskInstanceUpdateItem taskInstanceUpdateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taskInstanceUpdateItem;
        
        // verify the required parameter 'taskInstanceId' is set
        if (taskInstanceId == null) {
            throw new ApiException("Missing the required parameter 'taskInstanceId' when calling updateTaskInstance(Async)");
        }
        
        // verify the required parameter 'taskInstanceUpdateItem' is set
        if (taskInstanceUpdateItem == null) {
            throw new ApiException("Missing the required parameter 'taskInstanceUpdateItem' when calling updateTaskInstance(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/task_instances/{task_instance_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "task_instance_id" + "\\}", apiClient.escapeString(taskInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for updating an existing TaskInstance.
     * @param taskInstanceId ID of TaskInstance to fetch (required)
     * @param taskInstanceUpdateItem TaskInstance object to update (required)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 updateTaskInstance(String taskInstanceId, TaskInstanceUpdateItem taskInstanceUpdateItem) throws ApiException {
        ApiResponse<InlineResponse200> resp = updateTaskInstanceWithHttpInfo(taskInstanceId, taskInstanceUpdateItem);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for updating an existing TaskInstance.
     * @param taskInstanceId ID of TaskInstance to fetch (required)
     * @param taskInstanceUpdateItem TaskInstance object to update (required)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> updateTaskInstanceWithHttpInfo(String taskInstanceId, TaskInstanceUpdateItem taskInstanceUpdateItem) throws ApiException {
        com.squareup.okhttp.Call call = updateTaskInstanceCall(taskInstanceId, taskInstanceUpdateItem, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for updating an existing TaskInstance.
     * @param taskInstanceId ID of TaskInstance to fetch (required)
     * @param taskInstanceUpdateItem TaskInstance object to update (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTaskInstanceAsync(String taskInstanceId, TaskInstanceUpdateItem taskInstanceUpdateItem, final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTaskInstanceCall(taskInstanceId, taskInstanceUpdateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateUser */
    private com.squareup.okhttp.Call updateUserCall(String id, UserUpdateItem userUpdateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = userUpdateItem;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateUser(Async)");
        }
        
        // verify the required parameter 'userUpdateItem' is set
        if (userUpdateItem == null) {
            throw new ApiException("Missing the required parameter 'userUpdateItem' when calling updateUser(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/users/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "PasswordGrant" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * This method is intended for updating parameters an existing user.
     * @param id ID of User to fetch (required)
     * @param userUpdateItem User object for update (required)
     * @return UserItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserItem updateUser(String id, UserUpdateItem userUpdateItem) throws ApiException {
        ApiResponse<UserItem> resp = updateUserWithHttpInfo(id, userUpdateItem);
        return resp.getData();
    }

    /**
     * 
     * This method is intended for updating parameters an existing user.
     * @param id ID of User to fetch (required)
     * @param userUpdateItem User object for update (required)
     * @return ApiResponse&lt;UserItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserItem> updateUserWithHttpInfo(String id, UserUpdateItem userUpdateItem) throws ApiException {
        com.squareup.okhttp.Call call = updateUserCall(id, userUpdateItem, null, null);
        Type localVarReturnType = new TypeToken<UserItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is intended for updating parameters an existing user.
     * @param id ID of User to fetch (required)
     * @param userUpdateItem User object for update (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateUserAsync(String id, UserUpdateItem userUpdateItem, final ApiCallback<UserItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateUserCall(id, userUpdateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
